(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    158077,       3424]
NotebookOptionsPosition[    147626,       3203]
NotebookOutlinePosition[    150035,       3263]
CellTagsIndexPosition[    149948,       3258]
WindowTitle->ResolveCSSInterpretations
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["C S S TOOLS SYMBOL", "PacletNameCell",ExpressionUUID->
     "576e8a05-19bf-49c2-977d-fad2622f0f6a"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Tutorials",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"15ffd64b-4997-4767-9c65-ed818717cf4f"],
         TextCell[
          Row[{"Tutorials", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSTools\"\>":>Documentation`HelpLookup[
       "paclet:CSSTools/tutorial/CSSTools"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"Tutorials"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "d645d95b-0783-4e72-81f4-793f4614361a"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "See Also",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"a75d548e-1a63-4f4d-b5e5-b03c70c40ab7"],
         TextCell[
          Row[{"See Also", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"ResolveCSSInheritance\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/ResolveCSSInheritance"], "\<\"ResolveCSSCascade\"\
\>":>Documentation`HelpLookup["paclet:CSSTools/ref/ResolveCSSCascade"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"SeeAlso"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "84099ebe-7551-4ac0-a7e2-85153bb10811"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"6b955574-5ad2-4226-a1d3-515456a140a2"],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSTools\"\>":>Documentation`HelpLookup[
       "paclet:CSSTools/guide/CSSTools"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "c14f15bb-d7c4-4f17-9010-6230654acba2"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"2d3d3a83-1069-452a-93e1-2381c0ac9001"],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->
         False], {"\<\"CSSTools/ref/ResolveCSSInterpretations\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["CSSTools/ref/ResolveCSSInterpretations"]}, Visible -> 
            False]]; SelectionMove[
         DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/CSSTools/ref/\
ResolveCSSInterpretations.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$13301], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "CSSTools/ref/ResolveCSSInterpretations", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"URLMenu"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "7ca1ed6f-0617-443c-a400-25aa67ca645b"]
    }], "AnchorBar",ExpressionUUID->"333e08f2-26fa-47f9-a25f-bcf656ccf796"]}
  }]], "AnchorBarGrid",
 CellID->1,ExpressionUUID->"5e9ef57e-d226-400f-8257-ec799b0cac8f"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell["ResolveCSSInterpretations", "ObjectName",ExpressionUUID->
  "8f737d60-25af-470e-ae27-4b69cb52201b"],
 Cell[BoxData[
  TemplateBox[{8},
   "Spacer1"]],ExpressionUUID->"ae485b80-798b-4b66-ac6d-49dc5ecf1203"],
 Cell[BoxData[
 ""], "ObjectNameTranslation",ExpressionUUID->
  "e37ac40d-9e4b-4e9a-807a-58feb04a2109"]
}], "ObjectNameGrid",ExpressionUUID->"09739b89-20d4-45f6-a696-63fec154ca73"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{"ResolveCSSInterpretations", "[", 
       RowBox[{
        StyleBox["type", "TI"], ",", 
        StyleBox["CSSInterpretations", "TI"]}], "]"}]], "InlineFormula",
      ExpressionUUID->"8ba05797-c07b-4777-bdf8-a5a598f1e165"],
     " \[LineSeparator]combines options that were interpreted from the CSS \
importer. Any Left/Right/Bottom/Top and Min/Max values are merged and the \
resulting options are filtered by ",
     Cell[BoxData[
      StyleBox["type", "TI"]], "InlineFormula",ExpressionUUID->
      "888884ca-773b-47a4-9f1c-04e8692e4cd1"],
     "."
    }],ExpressionUUID->"148a8a8b-e05e-4d1a-8fa1-a28d8c32db74"]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, "Rows" -> {{None}}, 
   "RowsIndexed" -> {}}},
 CellID->982511436,ExpressionUUID->"731359fe-5216-4b54-ad5b-2d9dd3e11945"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    TemplateBox[{6},
     "Spacer1"]],ExpressionUUID->"7be9878b-035c-4816-ad5d-ef2a660ddad4"],
   "Details"
  }], "NotesFrameText",ExpressionUUID->"0fb48e08-c067-4f1b-8c2d-5f6316444138"],
  Appearance->{Automatic, None, "Normal", Automatic},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->
   "Preemptive"]],ExpressionUUID->"5cb521c5-ef59-4545-86e6-e37eb545f0ba"]], \
"NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->247038345,ExpressionUUID->"c88903fb-58df-4fdd-af57-b4770902e19c"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"7a576e0b-618f-457b-944b-3926cc57c367"],

Cell[TextData[{
 "This function does not take into account whether the interpretations came \
from important CSS rules, or whether the interpretations came from multiple \
CSS rule sets. Use ",
 ButtonBox["ResolveCSSCascade",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSCascade"],
 " to take specificity and importance into account."
}], "Notes",
 CellID->1067943069,ExpressionUUID->"f2f358b6-8985-4bda-8ef4-ff71c74f10c6"],

Cell["", "SectionFooterSpacer",ExpressionUUID->"637ac848-8136-4cad-8d89-d8b7d4a4bcf3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"51cd5006-bb89-4015-b810-46f0152d0f56"],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(4)", "ExampleCount",ExpressionUUID->
  "b22e758b-d185-4890-bdd2-2c0d91abf7ce"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->66619920,ExpressionUUID->"7c3e80a2-144d-4bc9-9064-261d93f217e0"],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(3)", "ExampleCount",ExpressionUUID->
  "b704fcb2-d7d7-4af8-8324-543e57f24fc0"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->395483301,ExpressionUUID->"efa1c6d3-ed07-4cb2-b314-7ecf874e618a"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->2362308,ExpressionUUID->"5ae85a26-bc48-428a-b514-db1d6922505a"],

Cell["Import a CSS border property.", "ExampleText",
 CellID->689169972,ExpressionUUID->"2d340e50-95c9-4b1c-895c-d5a9ef8a6488"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"ImportString", "[", 
   RowBox[{"\"\<h3 {border-left-color:red}\>\"", ",", "\"\<CSS\>\""}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->357978272,ExpressionUUID->"14780550-5941-4b08-ad0b-77a0f60903dc"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], 
               TypeSystem`Vector[TypeSystem`AnyType, 2]}], 1]}], 1], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Selector"} -> 1, {All, "Condition"} -> 
           1, {All, "Block"} -> 
           Association[{All, "Block", All, "Important"} -> 
             1, {All, "Block", All, "Property"} -> 
             1, {All, "Block", All, "Value"} -> 
             1, {All, "Block", All, "Interpretation"} -> 1]], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Selector" -> TypeSystem`PackageScope`UnknownShape, "Condition" -> 
              TypeSystem`PackageScope`UnknownShape, "Block" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`RowShape[
                  Association[
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                   "Property" -> 
                   TypeSystem`PackageScope`AtomShape[163.20000000000002`], 
                   "Value" -> 
                   TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                   "Interpretation" -> 
                   TypeSystem`PackageScope`UnknownShape]]], 1, {
                All, "Block"}]]]], 1, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1397970985], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], 
               TypeSystem`Vector[TypeSystem`AnyType, 2]}], 1]}], 1], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1397970985]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Selector\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Selector\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Selector"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Selector"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Condition"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Condition"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Block\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Block\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Block"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Block"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Block", All, "Important"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Block", All, "Important"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Property\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Property\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Block", All, "Property"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Block", All, "Property"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Block", All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[All, "Block", All, "Value"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{All, "Block", All, "Interpretation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[
                  All, "Block", All, "Interpretation"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"h3\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> "h3 ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "h3"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["border-left-color", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["red", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{FrameStyle -> Left[
                    CSSTools`CSSBorderColor[
                    RGBColor[1, 0, 0]]], $CellContext`CellFrameStyle -> Left[
                    CSSTools`CSSBorderColor[
                    RGBColor[1, 0, 0]]]}, ShowStringCharacters -> False], 
                    Style[
                    Style[{FrameStyle -> Left[
                    CSSTools`CSSBorderColor[
                    RGBColor[1, 0, 0]]], $CellContext`CellFrameStyle -> Left[
                    CSSTools`CSSBorderColor[
                    RGBColor[1, 0, 0]]]}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1309344200][{1, 
                    Key["Block"], 1, 
                    Key["Interpretation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"]]}}, 
             BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1309344200][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1309344200]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1309344200][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {1085., {45., 51.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 ImageSize->{1089, 98},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->130199378,ExpressionUUID->"274ebb03-3043-4d80-9793-456ace40110a"]
}, Open  ]],

Cell[TextData[{
 "This CSS rule can apply at two different scopes within the front end, \
either either at the ",
 ButtonBox["Cell",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cell"],
 " level or the box level. At the Cell level the ",
 ButtonBox["CellFrameStyle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CellFrameStyle"],
 " is extracted and unspecified parts of the option value are inserted."
}], "ExampleText",
 CellID->186503428,ExpressionUUID->"a3d41ade-4ecf-49fe-8dd2-88215c851864"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Cell", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->303138940,ExpressionUUID->"71e035d3-cc18-44d8-9069-f6dac142b51b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CellFrameStyle", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Directive", "[", 
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           GraphicsBox[{
             {GrayLevel[0], RectangleBox[{0, 0}]}, 
             {GrayLevel[0], RectangleBox[{1, -1}]}, 
             {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
            AspectRatio->1,
            DefaultBaseStyle->"ColorSwatchGraphics",
            Frame->True,
            FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
            FrameTicks->None,
            
            ImageSize->
             Dynamic[{
              Automatic, 1.35 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}],
            PlotRangePadding->None],
           StyleBox[
            RowBox[{"RGBColor", "[", 
              RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False], "]"}], ",", "Automatic"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{485, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->460309997,ExpressionUUID->"f81992ec-d9a5-47c9-b1be-d2d1cad3de7f"]
}, Open  ]],

Cell[TextData[{
 "There are many function or box name choices at the box level. This example \
uses ",
 ButtonBox["Frame",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Frame"],
 " because it supports the ",
 ButtonBox["FrameStyle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FrameStyle"],
 " option."
}], "ExampleText",
 CellID->130022432,ExpressionUUID->"7eb3d5c3-c1e3-451b-9729-ee9788ab1f3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Frame", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->88622724,ExpressionUUID->"b7d15969-17fa-422c-a75f-eae53ab4d147"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FrameBoxOptions", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"FrameStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Directive", "[", 
          InterpretationBox[
           ButtonBox[
            TooltipBox[
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              DefaultBaseStyle->"ColorSwatchGraphics",
              Frame->True,
              FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 1.35 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}],
              PlotRangePadding->None],
             StyleBox[
              RowBox[{"RGBColor", "[", 
                RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
              False]],
            Appearance->None,
            BaseStyle->{},
            BaselinePosition->Baseline,
            ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
              If[
               Not[
                AbsoluteCurrentValue["Deployed"]], 
               SelectionMove[Typeset`box$, All, Expression]; 
               FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
               FrontEnd`Private`$ColorSelectorInitialColor = 
                RGBColor[1, 0, 0]; 
               FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
               MathLink`CallFrontEnd[
                 FrontEnd`AttachCell[Typeset`box$, 
                  FrontEndResource["RGBColorValueSelector"], {
                  0, {Left, Bottom}}, {Left, Top}, 
                  "ClosingActions" -> {
                   "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
            DefaultBaseStyle->{},
            Evaluator->Automatic,
            Method->"Preemptive"],
           RGBColor[1, 0, 0],
           Editable->False,
           Selectable->False], "]"}], ",", "Automatic"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{479, 31},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->678163056,ExpressionUUID->"32fe4abd-26ee-46b6-aeb6-f8d2aaaad3bf"]
}, Open  ]],

Cell["\<\
If a function is chosen that does not support one of the interpreted option \
name, then an empty list is returned.\
\>", "ExampleText",
 CellID->185308903,ExpressionUUID->"3611fde3-1827-4a8f-8e5f-11343ecb725c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Pane", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->178475863,ExpressionUUID->"7a279641-d9ee-492a-a25a-a7c1ebec0c81"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 ImageSize->{18, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->348573161,ExpressionUUID->"e5ea18d6-22e9-4bad-b142-59a0fead4d3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "33edf451-9794-4473-9aaf-a2d211e954a1"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->35192266,ExpressionUUID->"be68af66-381f-4bbb-be7f-a44f1d825799"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->20978784,ExpressionUUID->"5ce6e49a-1804-4dee-aac0-b679bc21abc4"],

Cell["\<\
CSS allows each side of a border to be specified independently e.g. \
\"padding-left\". Such properties are interpreted with wrappers that require \
additional interpretation when making a Wolfram Desktop style option.\
\>", "ExampleText",
 CellID->560680910,ExpressionUUID->"ef4671bd-54b1-49ba-84b3-6072c6f7c1bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"ImportString", "[", 
   RowBox[{"\"\<h3 {padding:5px;padding-left:0}\>\"", ",", "\"\<CSS\>\""}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->350039482,ExpressionUUID->"1ad164e5-568a-4e98-bc49-907a4914b9c0"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], 
               TypeSystem`Vector[TypeSystem`AnyType, 2]}], 2]}], 1], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Selector"} -> 1, {All, "Condition"} -> 
           1, {All, "Block"} -> 
           Association[{All, "Block", All, "Important"} -> 
             1, {All, "Block", All, "Property"} -> 
             1, {All, "Block", All, "Value"} -> 
             1, {All, "Block", All, "Interpretation"} -> 1]], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Selector" -> TypeSystem`PackageScope`UnknownShape, "Condition" -> 
              TypeSystem`PackageScope`UnknownShape, "Block" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`RowShape[
                  Association[
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                   "Property" -> 
                   TypeSystem`PackageScope`AtomShape[115.20000000000002`], 
                   "Value" -> 
                   TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                   "Interpretation" -> 
                   TypeSystem`PackageScope`UnknownShape]]], 2, {
                All, "Block"}]]]], 1, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1871437755], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], 
               TypeSystem`Vector[TypeSystem`AnyType, 2]}], 2]}], 1], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1871437755]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Selector\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Selector\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Selector"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Selector"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Condition"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Condition"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Block\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Block\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Block"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Block"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Block", All, "Important"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Block", All, "Important"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Property\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Property\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Block", All, "Property"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Block", All, "Property"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Block", All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[All, "Block", All, "Value"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{All, "Block", All, "Interpretation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[
                  All, "Block", All, "Interpretation"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"h3\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> "h3 ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "h3"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["padding", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{FrameMargins -> {
                    Left[3.75], 
                    Right[3.75], 
                    Bottom[3.75], 
                    Top[3.75]}, CellFrameMargins -> {
                    Left[3.75], 
                    Right[3.75], 
                    Bottom[3.75], 
                    Top[3.75]}}, ShowStringCharacters -> False], 
                    Style[
                    Style[{FrameMargins -> {
                    Left[3.75], 
                    Right[3.75], 
                    Bottom[3.75], 
                    Top[3.75]}, CellFrameMargins -> {
                    Left[3.75], 
                    Right[3.75], 
                    Bottom[3.75], 
                    Top[3.75]}}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{1, 
                    Key["Block"], 1, 
                    Key["Interpretation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"]]}, {
              SpanFromAbove, SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["padding-left", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["0", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{FrameMargins -> Left[0], CellFrameMargins -> 
                    Left[0]}, ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    FrameMargins -> Left[0], CellFrameMargins -> Left[0]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1047206392][{1, 
                    Key["Block"], 2, 
                    Key["Interpretation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Interpretation"]]], "Mouse"]]}}, 
             BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1047206392][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1047206392]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1047206392][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {1227., {55., 61.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 ImageSize->{1231, 118},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->316558964,ExpressionUUID->"8d1164ad-9897-481a-a990-3c7c8f971e06"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 ButtonBox["ResolveCSSInterpretations",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSInterpretations"],
 " to process the ambiguous translations from CSS."
}], "ExampleText",
 CellID->157229494,ExpressionUUID->"57092147-f1c0-43b7-9f1b-f99574a03c3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Frame", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->390115392,ExpressionUUID->"3b705d15-0cb9-4127-848a-4b06a9824037"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FrameBoxOptions", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"FrameMargins", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "3.75`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3.75`", ",", "3.75`"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{421, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->206301623,ExpressionUUID->"e688d4e6-946b-4b68-b52f-c3068549b4ac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "05aba8ca-e513-4e1a-be84-f823bb2596be"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->131206920,ExpressionUUID->"cda430aa-c4e3-4a75-a3ac-9effdc4fa5ef"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->35669692,ExpressionUUID->"4b490eb1-c6d0-46ab-8f34-77c25d35d634"],

Cell["\<\
CSS allows minimum and maximum heights be specified independently from height \
values e.g. \"min-height\" and \"height\".  Such properties are interpreted \
with wrappers that require additional interpretation when making a Wolfram \
Desktop style option.\
\>", "ExampleText",
 CellID->41905468,ExpressionUUID->"d2465f17-cf53-4150-93e9-587206615dd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"ImportString", "[", 
   RowBox[{"\"\<h3 {width:10px;min-width:5px}\>\"", ",", "\"\<CSS\>\""}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->274318696,ExpressionUUID->"5574cdc8-f57b-4c18-8fcc-6da36dcb6a88"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], TypeSystem`AnyType}], 2]}], 1], 
        "Shape" -> TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Selector"} -> 1, {All, "Condition"} -> 
           1, {All, "Block"} -> 
           Association[{All, "Block", All, "Important"} -> 
             1, {All, "Block", All, "Property"} -> 
             1, {All, "Block", All, "Value"} -> 
             1, {All, "Block", All, "Interpretation"} -> 1]], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Selector" -> TypeSystem`PackageScope`UnknownShape, "Condition" -> 
              TypeSystem`PackageScope`UnknownShape, "Block" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`RowShape[
                  Association[
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                   "Property" -> TypeSystem`PackageScope`AtomShape[86.4], 
                   "Value" -> 
                   TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
                   "Interpretation" -> 
                   TypeSystem`PackageScope`UnknownShape]]], 2, {
                All, "Block"}]]]], 1, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[2063919060], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[String], 
               TypeSystem`Atom[String], TypeSystem`AnyType}], 2]}], 1], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[2063919060]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Selector\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Selector\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Selector"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Selector"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Condition"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Condition"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Block\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Block\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Block"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Block"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Block", All, "Important"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Block", All, "Important"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Property\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Property\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Block", All, "Property"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Block", All, "Property"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Block", All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[All, "Block", All, "Value"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][{
                    All, "Block", All, "Interpretation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[
                  All, "Block", All, "Interpretation"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"h3\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> "h3 ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "h3"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["width", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["10px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"CSSWidthMin", "[", "8", "]"}], ",", 
                    RowBox[{"CSSWidthMax", "[", "8", "]"}]}], "}"}]}], 
                   FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["min-width", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"CSSWidthMin", "[", "4", "]"}]}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 2, 
                   Key["Interpretation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 863628942]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[863628942][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {712., {56., 62.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 ImageSize->{716, 120},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->746979909,ExpressionUUID->"2065c8ce-2edd-46ef-882c-980edb75fe23"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 ButtonBox["ResolveCSSInterpretations",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSInterpretations"],
 " to process the ambiguous translations from CSS."
}], "ExampleText",
 CellID->58272061,ExpressionUUID->"282373e0-4699-4e9c-97cb-cf48a508fa10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Pane", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->521990532,ExpressionUUID->"3d1a6617-549b-4a13-8bc6-67a41afb57ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PaneBoxOptions", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"ImageSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "8"}], "}"}], ",", "Automatic"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{354, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->182789046,ExpressionUUID->"a25804bf-444a-4148-95af-402a147ab3e4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Possible Issues",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "682b87ee-f20c-4961-814c-74b6f43a7dfa"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1305812373,ExpressionUUID->"1918e4f6-e2d0-49b6-acd8-090b96418869"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->463466762,ExpressionUUID->"a522faec-b04d-4c88-9dc2-9c57c0ee179c"],

Cell[TextData[{
 ButtonBox["ResolveCSSInterpretations",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSInterpretations"],
 " takes interpreted options from CSS rules as its second argument. It is not \
possible to specify rule importance or specificity. Merged options may then \
be nonconforming with the CSS cascade."
}], "ExampleText",
 CellID->735660033,ExpressionUUID->"373b199c-7b5c-4f93-9f47-ab32017db288"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"ImportString", "[", 
   RowBox[{
   "\"\<.h {font-size:30px !important} .header {font-size:20px} h1 \
{font-size:10px}\>\"", ",", "\"\<CSS\>\""}], "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->8028334,ExpressionUUID->"44bfcb91-fcc2-46ff-aaa3-68b3d5a33cfd"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[
                TypeSystem`Enumeration["font-size"]], 
               TypeSystem`Atom[String], TypeSystem`AnyType}], 1]}], 3], 
        "Shape" -> TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Selector"} -> 1, {All, "Condition"} -> 
           1, {All, "Block"} -> 
           Association[{All, "Block", All, "Important"} -> 
             1, {All, "Block", All, "Property"} -> 
             1, {All, "Block", All, "Value"} -> 
             1, {All, "Block", All, "Interpretation"} -> 1]], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Selector" -> TypeSystem`PackageScope`UnknownShape, "Condition" -> 
              TypeSystem`PackageScope`UnknownShape, "Block" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`RowShape[
                  Association[
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                   "Property" -> TypeSystem`PackageScope`AtomShape[81.], 
                   "Value" -> 
                   TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
                   "Interpretation" -> 
                   TypeSystem`PackageScope`UnknownShape]]], 1, {
                All, "Block"}]]]], 3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1359739840], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{"Selector", "Condition", "Block"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "Important", "Property", "Value", "Interpretation"}, {
               TypeSystem`Atom[TypeSystem`Boolean], 
               TypeSystem`Atom[
                TypeSystem`Enumeration["font-size"]], 
               TypeSystem`Atom[String], TypeSystem`AnyType}], 1]}], 3], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1359739840]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Selector\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Selector\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Selector"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Selector"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Condition\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Condition"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Condition"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Block\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Block\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Block"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Block"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Important\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Block", All, "Important"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Block", All, "Important"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Property\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Property\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Block", All, "Property"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Block", All, "Property"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Block", All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[All, "Block", All, "Value"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Interpretation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1432311116][{All, "Block", All, "Interpretation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[
                  All, "Block", All, "Interpretation"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\".h\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> ".h ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Class" -> 
                    Association[
                    "Namespace" -> None, "Name" -> "class", "Match" -> 
                    "Include", "Value" -> "h"]}}, 
                    "Specificity" -> {0, 0, 1, 0}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["font-size", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{81., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["30px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"FontSize", "\[Rule]", "22.5`"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[1, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\".header\"", Selectable -> True, StripOnInput -> 
                    False]}, "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> ".header ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Class" -> 
                    Association[
                    "Namespace" -> None, "Name" -> "class", "Match" -> 
                    "Include", "Value" -> "header"]}}, 
                    "Specificity" -> {0, 0, 1, 0}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["font-size", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{81., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["20px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"FontSize", "\[Rule]", "15.`"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[2, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   InterpretationBox[
                    StyleBox[
                    FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"h1\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
                    FontWeight -> Bold, FontColor -> GrayLevel[0.2]}, 
                    StripOnInput -> False], Editable -> False, 
                    ShowStringCharacters -> False, StripOnInput -> False], 
                    CSSTools`CSSSelector[
                    Association[
                    "String" -> "h1 ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "h1"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Selector"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "None", FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Condition"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Block"], 1, 
                   Key["Important"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["font-size", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Block"], 1, 
                   Key["Property"]]], "Mouse"], 
                ImageSize -> {{81., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["10px", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Block"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"FontSize", "\[Rule]", "7.5`"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
                  GeneralUtilities`Slice[3, 
                   Key["Block"], 1, 
                   Key["Interpretation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1432311116][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1432311116]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1432311116][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {512., {75., 81.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 ImageSize->{516, 158},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->811765,ExpressionUUID->"342473fe-0e80-41bf-aae8-8dd378244405"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 ButtonBox["ResolveCSSInterpretations",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSInterpretations"],
 " with all interpretations would favor the last entry even though it has \
less specificity and is not important."
}], "ExampleText",
 CellID->353155343,ExpressionUUID->"6eba01a4-596d-4793-9d85-5813a592002c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSInterpretations", "[", 
  RowBox[{"Cell", ",", 
   RowBox[{"ds", "[", 
    RowBox[{"[", 
     RowBox[{
     "All", ",", "\"\<Block\>\"", ",", "All", ",", "\"\<Interpretation\>\""}],
      "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->474330076,ExpressionUUID->"0e97d9a7-8521-4d08-b3b5-8e3ba4ae0a3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FontSize", "\[Rule]", "7.5`"}], "}"}]], "Output",
 ImageSize->{112, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->28808064,ExpressionUUID->"7ed5cad1-39f2-4da7-9eb1-ccbef27d3014"]
}, Open  ]],

Cell[TextData[{
 ButtonBox["ResolveCSSCascade",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSCascade"],
 " takes into account the specificity of each selector. Indicate the selector \
by either a string, CSSSelector constructor, or a pre-constructed CSSSelector \
object."
}], "ExampleText",
 CellID->425091742,ExpressionUUID->"5404095f-68be-4ffa-89a9-f4fba185379e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSCascade", "[", 
  RowBox[{"Cell", ",", "ds", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<.header\>\"", ",", 
     RowBox[{"CSSSelector", "[", "\"\<h1\>\"", "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->284559187,ExpressionUUID->"d8c43dfc-a56a-4dc5-8a52-2b9b889d71da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FontSize", "\[Rule]", "15.`"}], "}"}]], "Output",
 ImageSize->{112, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->526442428,ExpressionUUID->"6c1f0307-419c-4769-ac5d-c25a6923640d"]
}, Open  ]],

Cell[TextData[{
 ButtonBox["ResolveCSSCascade",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSCascade"],
 " also takes into account the importance of each declaration."
}], "ExampleText",
 CellID->698595900,ExpressionUUID->"9477e3d2-e93c-4070-82c7-0b60736a8243"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResolveCSSCascade", "[", 
  RowBox[{"Cell", ",", "ds", ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      StyleBox[
       FrameBox[
        TemplateBox[{StyleBox["\"#CSS \"", 
           RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> False],
          StyleBox["\".h\"", Selectable -> True, StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[0.92, 0.98, 1],
        BaseStyle->{FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
          FontWeight -> Bold, FontColor -> GrayLevel[0.2]},
        FrameMargins->{{5, 5}, {2, 2}},
        FrameStyle->Directive[
          RGBColor[0, 0.5, 1], 
          AbsoluteThickness[1]],
        ImageMargins->2,
        RoundingRadius->4,
        StripOnInput->False],
       Editable->False,
       StripOnInput->False,
       ShowStringCharacters->False],
      CSSTools`CSSSelector[
       Association[
       "String" -> ".h", 
        "Sequence" -> {
         "SimpleSelectorSequence" -> {
           "Class" -> Association[
             "Namespace" -> None, "Name" -> "class", "Match" -> "Include", 
              "Value" -> "h"]}}, "Specificity" -> {0, 0, 1, 0}]]], ",", 
     InterpretationBox[
      StyleBox[
       FrameBox[
        TemplateBox[{StyleBox["\"#CSS \"", 
           RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> False],
          StyleBox["\"h1\"", Selectable -> True, StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[0.92, 0.98, 1],
        BaseStyle->{FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
          FontWeight -> Bold, FontColor -> GrayLevel[0.2]},
        FrameMargins->{{5, 5}, {2, 2}},
        FrameStyle->Directive[
          RGBColor[0, 0.5, 1], 
          AbsoluteThickness[1]],
        ImageMargins->2,
        RoundingRadius->4,
        StripOnInput->False],
       Editable->False,
       StripOnInput->False,
       ShowStringCharacters->False],
      CSSTools`CSSSelector[
       Association[
       "String" -> "h1 ", 
        "Sequence" -> {
         "SimpleSelectorSequence" -> {
           "Type" -> Association[
             "Namespace" -> Missing["NotFound"], "Name" -> "h1"]}}, 
        "Specificity" -> {0, 0, 0, 1}]]]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->121118279,ExpressionUUID->"b0fc4f3b-636b-488c-a24e-71ad44556439"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FontSize", "\[Rule]", "22.5`"}], "}"}]], "Output",
 ImageSize->{119, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->912611276,ExpressionUUID->"5a06c30e-4395-42c4-ac3a-5d90517f878f"]
}, Open  ]]
}, Closed]],

Cell["", "SectionFooterSpacer",ExpressionUUID->"b11f71ac-c4b1-4208-a6ba-1016da2b8706"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"e574952c-684d-41b8-8ecd-9e34e5886ab0"],
 "See Also"
}], "SeeAlsoSection",
 WholeCellGroupOpener->True,
 CellID->1255426704,ExpressionUUID->"a42e664a-0c29-4aa0-bb0d-c010f603d7ab"],

Cell[TextData[{
 StyleBox[ButtonBox["ResolveCSSInheritance",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSInheritance"],
  FontFamily->"Verdana"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 StyleBox[ButtonBox["ResolveCSSCascade",
  BaseStyle->"Link",
  ButtonData->"paclet:CSSTools/ref/ResolveCSSCascade"],
  FontFamily->"Verdana"]
}], "SeeAlso",
 CellID->929782353,ExpressionUUID->"0cb90bb9-975d-4287-b1e5-a8f7043c7d94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"ae70bbcd-5749-4d07-92e1-5e1dc1f6a876"],
 "Tutorials"
}], "TutorialsSection",
 WholeCellGroupOpener->True,
 CellID->250839057,ExpressionUUID->"202fae5c-80f8-43b1-a9b6-de8e69ffd745"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"f3a75851-76a8-4262-9c1f-c5a6bf558bc8"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["CSSTools"]],"paclet:CSSTools/tutorial/CSSTools"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->341631938,ExpressionUUID->"30abeea7-e9e2-457f-832d-dab9c3d414e8"],

Cell["", "SectionFooterSpacer",ExpressionUUID->"e5761186-0945-46e2-bd56-1b7ae2c6652c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"3f97b4a4-e468-4211-8501-b2e63a1db899"],
 "Related Guides"
}], "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->38303248,ExpressionUUID->"51b07f10-dd77-4e57-b061-67e79a4558cd"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"da53893c-fd64-4335-a4d7-5dc995798649"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["CSSTools"]],"paclet:CSSTools/guide/CSSTools"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->2609575,ExpressionUUID->"7c6a7f4b-3b79-4ffb-9b10-51fb57a6e728"]
}, Open  ]],

Cell[" ", "FooterCell",ExpressionUUID->"26a29e02-c076-44f6-a258-5bc35ce86a42"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"ResolveCSSInterpretations",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "CSSTools", ButtonData -> "paclet:CSSTools/guide/CSSTools", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "HasOptions" -> False, "ExampleCounter" -> 1, "NeedPlatMsgIn" -> 
  None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2019, 8, 12, 10, 25, 24.5775137}", 
    "history" -> {"0.0", "", "", ""}, "context" -> "CSSTools`", 
    "keywords" -> {}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "C S S Tools Symbol", "language" -> "en", "paclet" -> "CSSTools", 
    "status" -> "None", "summary" -> 
    "ResolveCSSInterpretations[type, CSSInterpretations] combines options \
that were interpreted from the CSS importer. Any Left/Right/Bottom/Top and \
Min/Max values are merged and the resulting options are filtered by type.", 
    "synonyms" -> {}, "tabletags" -> {}, "title" -> 
    "ResolveCSSInterpretations", "titlemodifier" -> "", "windowtitle" -> 
    "ResolveCSSInterpretations", "type" -> "Symbol", "uri" -> 
    "CSSTools/ref/ResolveCSSInterpretations", "WorkflowDockedCell" -> ""}, 
  "SearchTextTranslated" -> "", "NewStyles" -> False},
CellContext->"Global`",
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  TaggingRules -> {"NewStyles" -> False}, FrontEndVersion -> 
  "11.3 for Microsoft Windows (64-bit) (March 6, 2018)", StyleDefinitions -> 
  "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[8585, 220, 434, 11, 35, "PrimaryExamplesSection",ExpressionUUID->"7c3e80a2-144d-4bc9-9064-261d93f217e0",
   CellTags->"PrimaryExamplesSection",
   CellID->66619920]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 149751, 3251}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[597, 21, 5071, 117, 55, "AnchorBarGrid",ExpressionUUID->"5e9ef57e-d226-400f-8257-ec799b0cac8f",
 CellID->1],
Cell[CellGroupData[{
Cell[5693, 142, 410, 9, 52, "ObjectNameGrid",ExpressionUUID->"09739b89-20d4-45f6-a696-63fec154ca73"],
Cell[6106, 153, 925, 21, 131, "Usage",ExpressionUUID->"731359fe-5216-4b54-ad5b-2d9dd3e11945",
 CellID->982511436]
}, Open  ]],
Cell[CellGroupData[{
Cell[7068, 179, 855, 21, 37, "NotesSection",ExpressionUUID->"c88903fb-58df-4fdd-af57-b4770902e19c",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->247038345],
Cell[7926, 202, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"7a576e0b-618f-457b-944b-3926cc57c367"],
Cell[8015, 204, 444, 9, 70, "Notes",ExpressionUUID->"f2f358b6-8985-4bda-8ef4-ff71c74f10c6",
 CellID->1067943069],
Cell[8462, 215, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"637ac848-8136-4cad-8d89-d8b7d4a4bcf3"]
}, Closed]],
Cell[CellGroupData[{
Cell[8585, 220, 434, 11, 35, "PrimaryExamplesSection",ExpressionUUID->"7c3e80a2-144d-4bc9-9064-261d93f217e0",
 CellTags->"PrimaryExamplesSection",
 CellID->66619920],
Cell[CellGroupData[{
Cell[9044, 235, 308, 7, 29, "ExampleSection",ExpressionUUID->"efa1c6d3-ed07-4cb2-b314-7ecf874e618a",
 CellID->395483301],
Cell[9355, 244, 170, 3, 26, "Input",ExpressionUUID->"5ae85a26-bc48-428a-b514-db1d6922505a",
 CellID->2362308],
Cell[9528, 249, 127, 1, 38, "ExampleText",ExpressionUUID->"2d340e50-95c9-4b1c-895c-d5a9ef8a6488",
 CellID->689169972],
Cell[CellGroupData[{
Cell[9680, 254, 258, 6, 26, "Input",ExpressionUUID->"14780550-5941-4b08-ad0b-77a0f60903dc",
 CellID->357978272],
Cell[9941, 262, 26506, 518, 119, "Output",ExpressionUUID->"274ebb03-3043-4d80-9793-456ace40110a",
 CellID->130199378]
}, Open  ]],
Cell[36462, 783, 500, 12, 76, "ExampleText",ExpressionUUID->"a3d41ade-4ecf-49fe-8dd2-88215c851864",
 CellID->186503428],
Cell[CellGroupData[{
Cell[36987, 799, 352, 9, 26, "Input",ExpressionUUID->"71e035d3-cc18-44d8-9069-f6dac142b51b",
 CellID->303138940],
Cell[37342, 810, 2313, 59, 35, "Output",ExpressionUUID->"f81992ec-d9a5-47c9-b1be-d2d1cad3de7f",
 CellID->460309997]
}, Open  ]],
Cell[39670, 872, 400, 12, 57, "ExampleText",ExpressionUUID->"7eb3d5c3-c1e3-451b-9729-ee9788ab1f3e",
 CellID->130022432],
Cell[CellGroupData[{
Cell[40095, 888, 352, 9, 70, "Input",ExpressionUUID->"b7d15969-17fa-422c-a75f-eae53ab4d147",
 CellID->88622724],
Cell[40450, 899, 2512, 63, 70, "Output",ExpressionUUID->"32fe4abd-26ee-46b6-aeb6-f8d2aaaad3bf",
 CellID->678163056]
}, Open  ]],
Cell[42977, 965, 221, 4, 70, "ExampleText",ExpressionUUID->"3611fde3-1827-4a8f-8e5f-11343ecb725c",
 CellID->185308903],
Cell[CellGroupData[{
Cell[43223, 973, 352, 9, 70, "Input",ExpressionUUID->"7a279641-d9ee-492a-a25a-a7c1ebec0c81",
 CellID->178475863],
Cell[43578, 984, 230, 6, 35, "Output",ExpressionUUID->"e5ea18d6-22e9-4bad-b142-59a0fead4d3c",
 CellID->348573161]
}, Open  ]],
Cell[CellGroupData[{
Cell[43845, 995, 241, 5, 70, "ExampleDelimiter",ExpressionUUID->"be68af66-381f-4bbb-be7f-a44f1d825799",
 CellID->35192266],
Cell[44089, 1002, 171, 3, 70, "Input",ExpressionUUID->"5ce6e49a-1804-4dee-aac0-b679bc21abc4",
 CellID->20978784],
Cell[44263, 1007, 324, 5, 70, "ExampleText",ExpressionUUID->"ef4671bd-54b1-49ba-84b3-6072c6f7c1bd",
 CellID->560680910],
Cell[CellGroupData[{
Cell[44612, 1016, 263, 6, 70, "Input",ExpressionUUID->"1ad164e5-568a-4e98-bc49-907a4914b9c0",
 CellID->350039482],
Cell[44878, 1024, 29209, 578, 70, "Output",ExpressionUUID->"8d1164ad-9897-481a-a990-3c7c8f971e06",
 CellID->316558964]
}, Open  ]],
Cell[74102, 1605, 295, 7, 70, "ExampleText",ExpressionUUID->"57092147-f1c0-43b7-9f1b-f99574a03c3b",
 CellID->157229494],
Cell[CellGroupData[{
Cell[74422, 1616, 353, 9, 70, "Input",ExpressionUUID->"3b705d15-0cb9-4127-848a-4b06a9824037",
 CellID->390115392],
Cell[74778, 1627, 527, 16, 35, "Output",ExpressionUUID->"e688d4e6-946b-4b68-b52f-c3068549b4ac",
 CellID->206301623]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75354, 1649, 242, 5, 70, "ExampleDelimiter",ExpressionUUID->"cda430aa-c4e3-4a75-a3ac-9effdc4fa5ef",
 CellID->131206920],
Cell[75599, 1656, 171, 3, 70, "Input",ExpressionUUID->"4b490eb1-c6d0-46ab-8f34-77c25d35d634",
 CellID->35669692],
Cell[75773, 1661, 361, 6, 70, "ExampleText",ExpressionUUID->"d2465f17-cf53-4150-93e9-587206615dd4",
 CellID->41905468],
Cell[CellGroupData[{
Cell[76159, 1671, 261, 6, 70, "Input",ExpressionUUID->"5574cdc8-f57b-4c18-8fcc-6da36dcb6a88",
 CellID->274318696],
Cell[76423, 1679, 27352, 538, 70, "Output",ExpressionUUID->"2065c8ce-2edd-46ef-882c-980edb75fe23",
 CellID->746979909]
}, Open  ]],
Cell[103790, 2220, 294, 7, 70, "ExampleText",ExpressionUUID->"282373e0-4699-4e9c-97cb-cf48a508fa10",
 CellID->58272061],
Cell[CellGroupData[{
Cell[104109, 2231, 352, 9, 70, "Input",ExpressionUUID->"3d1a6617-549b-4a13-8bc6-67a41afb57ef",
 CellID->521990532],
Cell[104464, 2242, 462, 14, 35, "Output",ExpressionUUID->"a25804bf-444a-4148-95af-402a147ab3e4",
 CellID->182789046]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104987, 2263, 310, 7, 70, "ExampleSection",ExpressionUUID->"1918e4f6-e2d0-49b6-acd8-090b96418869",
 CellID->1305812373],
Cell[105300, 2272, 172, 3, 70, "Input",ExpressionUUID->"a522faec-b04d-4c88-9dc2-9c57c0ee179c",
 CellID->463466762],
Cell[105475, 2277, 432, 8, 70, "ExampleText",ExpressionUUID->"373b199c-7b5c-4f93-9f47-ab32017db288",
 CellID->735660033],
Cell[CellGroupData[{
Cell[105932, 2289, 307, 7, 70, "Input",ExpressionUUID->"44bfcb91-fcc2-46ff-aaa3-68b3d5a33cfd",
 CellID->8028334],
Cell[106242, 2298, 33930, 673, 70, "Output",ExpressionUUID->"342473fe-0e80-41bf-aae8-8dd378244405",
 CellID->811765]
}, Open  ]],
Cell[140187, 2974, 361, 8, 70, "ExampleText",ExpressionUUID->"6eba01a4-596d-4793-9d85-5813a592002c",
 CellID->353155343],
Cell[CellGroupData[{
Cell[140573, 2986, 352, 9, 70, "Input",ExpressionUUID->"0e97d9a7-8521-4d08-b3b5-8e3ba4ae0a3b",
 CellID->474330076],
Cell[140928, 2997, 274, 7, 35, "Output",ExpressionUUID->"7ed5cad1-39f2-4da7-9eb1-ccbef27d3014",
 CellID->28808064]
}, Open  ]],
Cell[141217, 3007, 387, 8, 70, "ExampleText",ExpressionUUID->"5404095f-68be-4ffa-89a9-f4fba185379e",
 CellID->425091742],
Cell[CellGroupData[{
Cell[141629, 3019, 321, 8, 70, "Input",ExpressionUUID->"d8c43dfc-a56a-4dc5-8a52-2b9b889d71da",
 CellID->284559187],
Cell[141953, 3029, 275, 7, 35, "Output",ExpressionUUID->"6c1f0307-419c-4769-ac5d-c25a6923640d",
 CellID->526442428]
}, Open  ]],
Cell[142243, 3039, 282, 6, 70, "ExampleText",ExpressionUUID->"9477e3d2-e93c-4070-82c7-0b60736a8243",
 CellID->698595900],
Cell[CellGroupData[{
Cell[142550, 3049, 2446, 64, 70, "Input",ExpressionUUID->"b0fc4f3b-636b-488c-a24e-71ad44556439",
 CellID->121118279],
Cell[144999, 3115, 276, 7, 35, "Output",ExpressionUUID->"5a06c30e-4395-42c4-ac3a-5d90517f878f",
 CellID->912611276]
}, Open  ]]
}, Closed]],
Cell[145302, 3126, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"b11f71ac-c4b1-4208-a6ba-1016da2b8706"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145425, 3131, 260, 7, 70, "SeeAlsoSection",ExpressionUUID->"a42e664a-0c29-4aa0-bb0d-c010f603d7ab",
 CellID->1255426704],
Cell[145688, 3140, 519, 14, 70, "SeeAlso",ExpressionUUID->"0cb90bb9-975d-4287-b1e5-a8f7043c7d94",
 CellID->929782353]
}, Open  ]],
Cell[CellGroupData[{
Cell[146244, 3159, 262, 7, 70, "TutorialsSection",ExpressionUUID->"202fae5c-80f8-43b1-a9b6-de8e69ffd745",
 CellID->250839057],
Cell[146509, 3168, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"f3a75851-76a8-4262-9c1f-c5a6bf558bc8"],
Cell[146598, 3170, 226, 5, 70, "Tutorials",ExpressionUUID->"30abeea7-e9e2-457f-832d-dab9c3d414e8",
 CellID->341631938],
Cell[146827, 3177, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"e5761186-0945-46e2-bd56-1b7ae2c6652c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146950, 3182, 266, 7, 70, "MoreAboutSection",ExpressionUUID->"51b07f10-dd77-4e57-b061-67e79a4558cd",
 CellID->38303248],
Cell[147219, 3191, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"da53893c-fd64-4335-a4d7-5dc995798649"],
Cell[147308, 3193, 221, 5, 70, "MoreAbout",ExpressionUUID->"7c6a7f4b-3b79-4ffb-9b10-51fb57a6e728",
 CellID->2609575]
}, Open  ]],
Cell[147544, 3201, 78, 0, 70, "FooterCell",ExpressionUUID->"26a29e02-c076-44f6-a258-5bc35ce86a42"]
}
]
*)

(* End of internal cache information *)


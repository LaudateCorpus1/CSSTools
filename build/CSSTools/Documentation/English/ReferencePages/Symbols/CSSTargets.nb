(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    224153,       4723]
NotebookOptionsPosition[    211179,       4450]
NotebookOutlinePosition[    213542,       4510]
CellTagsIndexPosition[    213455,       4505]
WindowTitle->CSSTargets
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["C S S TOOLS SYMBOL", "PacletNameCell",ExpressionUUID->
     "17e2552e-ea7a-4682-bf9f-3f1926224a0b"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Tutorials",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"0fe28a4d-8b16-4ce0-9a65-4c9de534c0ce"],
         TextCell[
          Row[{"Tutorials", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSTools\"\>":>Documentation`HelpLookup[
       "paclet:CSSTools/tutorial/CSSTools"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"Tutorials"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "082feb3a-e542-40c6-b49c-6cff50facceb"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "See Also",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"ca74514f-4144-4210-8f62-da373bc62021"],
         TextCell[
          Row[{"See Also", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSSelector\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/CSSSelector"], "\<\"CSSSelectorQ\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/CSSSelectorQ"], "\<\"CSSTargetQ\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/CSSTargetQ"], "\<\"ExtractCSSFromXML\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/ExtractCSSFromXML"], "\<\"CSSCascade\"\>":>
       Documentation`HelpLookup[
       "paclet:CSSTools/ref/CSSCascade"], "\<\"CSSInheritance\"\>":>
       Documentation`HelpLookup["paclet:CSSTools/ref/CSSInheritance"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"SeeAlso"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "046c54ef-f0ba-417d-8c62-4e0c616f4e9c"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"e3b44a11-3eaf-4108-971c-2d8fbb9d060c"],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSTools\"\>":>Documentation`HelpLookup[
       "paclet:CSSTools/guide/CSSTools"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "139cbe88-61d9-413c-8ec3-9752d842859a"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }],ExpressionUUID->"505c149f-2fce-4a44-84c2-6ec8ed182d13"],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"CSSTools/ref/CSSTargets\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["CSSTools/ref/CSSTargets"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/CSSTools/ref/\
CSSTargets.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$13321], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "CSSTools/ref/CSSTargets", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"URLMenu"]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "54e25358-f774-4512-9fd4-a9a79c567e99"]
    }], "AnchorBar",ExpressionUUID->"c2c1cad6-cf07-41c9-a9c4-bd41de714f20"]}
  }]], "AnchorBarGrid",
 CellID->1,ExpressionUUID->"19449b3d-0936-432d-8be4-5d8a45f296d4"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell["CSSTargets", "ObjectName",ExpressionUUID->
  "88c77109-2113-4706-a102-6c68b019cdf5"],
 Cell[BoxData[
  TemplateBox[{8},
   "Spacer1"]],ExpressionUUID->"4a274a70-803b-4b5b-b7d3-53ef5a87dc3e"],
 Cell[BoxData[
 ""], "ObjectNameTranslation",ExpressionUUID->
  "735e0661-db17-483e-8b1a-be59eb769249"]
}], "ObjectNameGrid",ExpressionUUID->"40c4e21b-29c7-464f-90c8-39959986f7ea"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{"CSSTargets", "[", 
       RowBox[{
        StyleBox["XMLObject", "TI"], ",", 
        StyleBox["CSSData", "TI"]}], "]"}]], "InlineFormula",ExpressionUUID->
      "3d380e3f-eb70-42d5-afd8-74d5a7ab5dc0"],
     " \[LineSeparator]Applies the ",
     Cell[BoxData[
      RowBox[{
       StyleBox["CSSData", "TI"], " "}]], "InlineFormula",ExpressionUUID->
      "7d2c2adb-c0ff-4c02-9ee3-c73fafa625cf"],
     " to the symbolic XML, returning the ",
     Cell[BoxData[
      RowBox[{
       StyleBox["CSSData", "TI"], " "}]], "InlineFormula",ExpressionUUID->
      "a58b6fc9-9b3a-465e-bd3a-14f27101cae6"],
     " with additional information about the XML element targeted by the CSS \
selector."
    }],ExpressionUUID->"ca92bbc1-b6a7-447b-bd5c-bb127547c6e4"]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {{None}}}},
 CellID->982511436,ExpressionUUID->"af62aba0-e7af-4bba-b86a-6db18f5a2406"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    TemplateBox[{6},
     "Spacer1"]],ExpressionUUID->"544a12ca-0966-46a2-a7d6-06e1a60b4ee8"],
   "Details"
  }], "NotesFrameText",ExpressionUUID->"01d27064-bfa6-439c-bbba-64d3e2fe8f5f"],
  Appearance->{Automatic, None, "Normal", Automatic},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->
   "Preemptive"]],ExpressionUUID->"160b1276-9685-41a8-81d0-402d397c9c12"]], \
"NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->601459251,ExpressionUUID->"9a028890-9ee5-4f9f-811d-b7a51e8eb5c4"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"9138c67c-1345-47a9-8f5e-472bce5b84ba"],

Cell[TextData[{
 "CSS data is independent of the document that it applies to. Use ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargets"]], "paclet:CSSTools/ref/CSSTargets"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "a42b1b18-37d3-49cd-9878-2d0c35e770d8"],
 " to see which XML elements the CSS rules target. "
}], "Notes",
 CellID->1067943069,ExpressionUUID->"7fd37375-aabc-441d-b315-e90736bb430a"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargets"]], "paclet:CSSTools/ref/CSSTargets"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "d75cc477-5bc9-4ac3-9fae-a57a4a703110"],
 " returns a list of ",
 Cell[BoxData[
 "CSSTarget"], "InlineFormula",ExpressionUUID->
  "5659dacb-6a15-4b35-abd9-09365b357c21"],
 " expressions. A CSSTarget Use ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargetQ"]], "paclet:CSSTools/ref/CSSTargetQ"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "94ad4323-857e-4089-a8b1-9c2381abdd30"],
 " to test whether an expression is a valid ",
 Cell[BoxData[
 "CSSTarget"], "InlineFormula",ExpressionUUID->
  "3c3ecf05-5779-4680-a662-2e2080d47810"],
 " expression."
}], "Notes",
 CellID->68078935,ExpressionUUID->"4bfaa189-ffe3-44b6-b10d-d4f4295cfb7b"],

Cell["The following options can be given:", "Notes",
 CellID->249298714,ExpressionUUID->"5df5a5f3-a24d-4f4e-b1d5-84bcdbe77862"],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon",ExpressionUUID->
     "09730ce9-1d42-4883-ae80-144082b4f912"], "\"\<ID\>\"", "\"\<id\>\"", 
    Cell["\<\
Attribute name to use when expanding the # shorthand notation in a selector.\
\>", "TableText",ExpressionUUID->"db83dfff-b63c-4992-9a36-f7e82092be97"]},
   {Cell["      ", "TableRowIcon",ExpressionUUID->
     "2681b4ce-74e9-497d-86de-5e1c5df30b70"], "\"\<CaseSensitive\>\"", 
    "False", Cell[
    "Ignore case in type, attribute name, and attribute value.", "TableText",
     ExpressionUUID->"6f0c6691-d989-4935-bf40-11b9464fa18a"]}
  }]], "3ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {None, {None}}},
 GridBoxDividers->{"Rows" -> {{True, True, True}}}},
 CellID->410826631,ExpressionUUID->"984eb4de-3e53-4465-b5ce-a2729ac81eb1"],

Cell[TextData[{
 "CSS is case-insensitive but some document languages like XML are not. The ",
 StyleBox["\"CaseSensitive\"", "InlineCode"],
 " option allows for fine control over which aspects of the document or CSS \
ignore case. Possible settings for ",
 StyleBox["\"CaseSensitive\"", "InlineCode"],
 " include:"
}], "Notes",
 CellID->823635335,ExpressionUUID->"577733e8-2add-4d44-a29d-1498883105e5"],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon",ExpressionUUID->
     "ed4087fd-0335-44c8-b50f-5fdc9af1861d"], "\"\<Type\>\"", "False", Cell[
    "Ignore case of type element names.", "TableText",ExpressionUUID->
     "cf737996-25ab-4286-983b-c684ac7865f0"]},
   {Cell["      ", "TableRowIcon",ExpressionUUID->
     "d8d44a4b-28a9-438f-9478-9515b25bf535"], "\"\<AttributeName\>\"", 
    "False", Cell[
    "Ignore case of attribute names. ", "TableText",ExpressionUUID->
     "e8c2acb6-8b1f-4034-a937-eb596419c11b"]},
   {Cell["      ", "TableRowIcon",ExpressionUUID->
     "cd8b3457-0094-4fd6-b770-b71d3f5db316"], "\"\<AttributeValue\>\"", 
    "False", Cell[
    "Ignore case of attribute values", "TableText",ExpressionUUID->
     "b3bfd048-1144-421d-b69c-6927238235f3"]}
  }]], "3ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {None, None, {None}}},
 GridBoxDividers->{"Rows" -> {{True, True, True, True}}}},
 CellID->327274850,ExpressionUUID->"37be4b8f-0ab5-4b5a-8e2b-7f45f851e67f"],

Cell["", "SectionFooterSpacer",ExpressionUUID->"9d5ec30f-746c-4aba-998c-2c731135feb2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"c442f1d8-4c63-4867-94b7-51d126082ab8"],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(5)", "ExampleCount",ExpressionUUID->
  "2c3425e0-6cd0-44b4-896a-a4a76111f03a"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->704398948,ExpressionUUID->"e316f32c-6788-43ba-b802-ccb2b57064e6"],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount",ExpressionUUID->
  "c13e7447-a796-46ae-abdf-eeb3e0be45eb"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->577583512,ExpressionUUID->"7c8006e0-a28d-472b-989d-7d2f078ca495"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargets"]], "paclet:CSSTools/ref/CSSTargets"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "07af15bd-9ffb-4425-a25c-3debc6ffe840"],
 " to extract the positions of ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["XMLElement"]], "paclet:ref/XMLElement"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "3bfafb4c-6f24-4b99-b7f6-8b49bb49bc9f"],
 " instances that the selector targets:"
}], "ExampleText",
 CellID->356787859,ExpressionUUID->"1773d1e3-3427-40ab-8249-e8d3d1c537ee"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->156532367,ExpressionUUID->"435cc560-8b7c-4b43-9540-9e3014b9846f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
    "\"\<<html><head><title>Test</title></head><body \
xmlns='http://www.w3.org/1999/xhtml'><p class='red' myid='unique'>Here is \
some math.</p><p><m:math xmlns:m='http://www.w3.org/1998/Math/MathML'><m:mi \
m:title='cat'>x</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:math></p></body></html>\
\>\"", ",", "\"\<XML\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->16992958,ExpressionUUID->"493420c9-dd16-4dfd-9598-071cb44051a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", 
   RowBox[{"CSSSelector", "[", "\"\<mo\>\"", "]"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->201089156,ExpressionUUID->"c78dbdd4-8c55-4009-a020-eec0dd591cbc"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   StyleBox[
    TagBox[
     TooltipBox[
      FrameBox[
       TemplateBox[{
         StyleBox["\"XML \"", 
          RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
         StyleBox["\"mo\"", Selectable -> True, StripOnInput -> False]},
        "RowDefault"],
       Background->RGBColor[1, 0.9, 1],
       BaseStyle->{FontFamily -> Dynamic[
           CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
         FontColor -> GrayLevel[0.2]},
       FrameMargins->{{5, 5}, {2, 2}},
       FrameStyle->Directive[
         RGBColor[0.5, 0, 1], 
         AbsoluteThickness[1]],
       ImageMargins->2,
       RoundingRadius->4,
       StripOnInput->False],
      RowBox[{"{", 
        RowBox[{
         "2", ",", "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "1", ",",
           "3", ",", "2"}], "}"}]],
     Annotation[#, {2, 3, 2, 3, 2, 3, 1, 3, 2}, "Tooltip"]& ],
    Editable->False,
    StripOnInput->False,
    ShowStringCharacters->False],
   CSSTools`CSSTarget[
    Association[
    "Type" -> "mo", "Namespace" -> "http://www.w3.org/1998/Math/MathML", 
     "Position" -> {2, 3, 2, 3, 2, 3, 1, 3, 2}, "Attributes" -> Association[],
      "ID" -> "id", "CaseSensitive" -> 
     Association[
      "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
       False]]]], "}"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->149808673,ExpressionUUID->"9655a8c4-2b9b-4f8b-9180-7a89c5a2b311"]
}, Open  ]],

Cell[TextData[{
 "A ",
 Cell[BoxData[
 "CSSTarget"], "InlineFormula",ExpressionUUID->
  "0479788d-41ad-4cce-9f24-cc2b41b7c837"],
 " expression contains useful information when performing the CSS cascade \
algorithm via either the ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSCascade"]], "paclet:CSSTools/ref/CSSCascade"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "77a3a695-8bc8-4aeb-89be-f1e62a7d18b1"],
 " or ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSInheritance"]], "paclet:CSSTools/ref/CSSInheritance"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "e061cf29-7607-43bc-9227-f99c7d2db36a"],
 " functions:"
}], "ExampleText",
 CellID->209715665,ExpressionUUID->"96203288-e364-47e3-9fd5-5a5e2909a704"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"CSSTargets", "[", 
   RowBox[{"obj", ",", 
    RowBox[{"CSSSelector", "[", "\"\<mo\>\"", "]"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->391333396,ExpressionUUID->"61c98180-add7-4945-84bf-f4b91d040aab"],

Cell["\<\
{CSSTarget[<|\"Type\" -> \"mo\", \"Namespace\" -> \
\"http://www.w3.org/1998/Math/MathML\", 
   \"Position\" -> {2, 3, 2, 3, 2, 3, 1, 3, 2}, \"Attributes\" -> <||>, \
\"ID\" -> \"id\", 
   \"CaseSensitive\" -> <|\"Type\" -> False, \"AttributeName\" -> False, 
     \"AttributeValue\" -> False|>|>]}\
\>", "Output",
 CellLabel->"Out[4]//InputForm=",
 CellID->42378018,ExpressionUUID->"7f8db4c1-ad8d-4541-9f96-98b79a7ae696"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "55925c2c-906e-4bb1-b003-3b32f1b51cae"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->150864650,ExpressionUUID->"b3ef7344-f673-4f81-aa54-5ed9129801fd"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargets"]], "paclet:CSSTools/ref/CSSTargets"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "f65442bb-593c-4a70-8be1-04bbc6642975"],
 " also works with CSS data. Start with CSS data that stands alone from any \
XML document. The data is modified to include the targeted ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["XMLElement"]], "paclet:ref/XMLElement"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",ExpressionUUID->
  "67320d09-1aef-4291-9818-fd3fe5a920f3"],
 " instances:"
}], "ExampleText",
 CellID->429255363,ExpressionUUID->"93177224-3af8-4f6d-974c-30226c716d8a"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->897416440,ExpressionUUID->"3152f218-80e4-4982-bdf2-77e1a2462c86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cssData", "=", 
  RowBox[{"ImportString", "[", 
   RowBox[{"\"\<tag {color:red;}\>\"", ",", " ", "\"\<CSS\>\""}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->557491354,ExpressionUUID->"197dbd67-3eb9-450b-87fc-509e2edfbb7e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association["Selector" -> CSSTools`CSSSelector[
          Association[
          "String" -> "tag ", 
           "Sequence" -> {
            "SimpleSelectorSequence" -> {
              "Type" -> Association[
                "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
           "Specificity" -> {0, 0, 0, 1}]], "Block" -> {
          Association[
          "Property" -> "color", "Value" -> "red", "Important" -> False, 
           "Interpretation" -> Association[FontColor -> RGBColor[1, 0, 0]], 
           "Condition" -> None]}]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 2, {All}]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Block"}, {TypeSystem`AnyType, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Meta" -> 
     Association["ID" -> 266266692923725], "RowTarget" -> 20, "ColumnTarget" -> 
     20, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 2, {All}]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Block"}, {TypeSystem`AnyType, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Path" -> {}, "BaseIndices" -> {},
      "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     1, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "ScrollPosition" -> {1, 1}, "UpdateType" -> 1],
     TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Selector", 
                    Style[
                    "Selector", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                    All, "Selector"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 200696905][{All, "Selector"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Block", 
                  Style[
                  "Block", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                  All, "Block"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{All, "Block"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
           SpanFromAbove, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Property", 
                    Style[
                    "Property", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                    All, "Block", All, "Property"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 200696905][{All, "Block", All, "Property"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                    All, "Block", All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 200696905][{All, "Block", All, "Value"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Important", 
                    Style[
                    "Important", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                    All, "Block", All, "Important"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 200696905][{All, "Block", All, "Important"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Interpretation", 
                  Style[
                  "Interpretation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                  All, "Block", All, "Interpretation"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{All, "Block", All, "Interpretation"}, 
                "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Condition", 
                    Style[
                    "Condition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][{
                    All, "Block", All, "Condition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 200696905][{All, "Block", All, "Condition"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  StyleBox[
                   FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"tag\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> 
                    Bold, FontColor -> GrayLevel[0.2]}, StripOnInput -> 
                    False], Editable -> False, ShowStringCharacters -> False, 
                   StripOnInput -> False], 
                  CSSTools`CSSSelector[
                   Association[
                   "String" -> "tag ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Selector"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["color", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Property"]}, "Item", False], "Mouse"], 
              ImageSize -> {{48.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["red", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Important"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "FontColor", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                   BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                   ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "None", FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               200696905][{1, 
                 Key["Block"], 1, 
                 Key["Condition"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                200696905, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 With[{
                   TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                   Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]], FontFamily -> "Verdana",
             FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`Pathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 200696905]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
        MouseAnnotation[Null], {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[200696905][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[200696905][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 200696905; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
      FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
      Top, ImageSize -> {Automatic, 15}], FontSize -> 1]}, 
    DynamicBox[ToBoxes[
      Dataset`DatasetContent[
      1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$, "State" -> 
       TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], StandardForm],
     ImageSizeCache->{502., {56.875, 62.125}},
     TrackedSymbols:>{
      TypeSystem`NestedGrid`PackagePrivate`$state$$, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]]],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[2]=",
 CellID->198964237,ExpressionUUID->"964a322d-8558-4efb-a694-c904b74fbc8c"]
}, Open  ]],

Cell["\<\
Some XML may contain elements that can be targeted by this CSS data:\
\>", "ExampleText",
 CellID->518384591,ExpressionUUID->"e8fd351b-8614-4ed7-a903-bd4b4c24a16c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"doc", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
    "\"\<<body><tag>Tag content.</tag><label><tag>Another \
tag.</tag></label></body>\>\"", ",", "\"\<XML\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->716083783,ExpressionUUID->"bcfc86a9-e614-4153-8dbf-3a796aeeb272"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"doc", ",", "cssData"}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->78224434,ExpressionUUID->"88c2553b-692c-400e-850d-7dd53828eba5"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association["Selector" -> CSSTools`CSSSelector[
          Association[
          "String" -> "tag ", 
           "Sequence" -> {
            "SimpleSelectorSequence" -> {
              "Type" -> Association[
                "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
           "Specificity" -> {0, 0, 0, 1}]], "Targets" -> {
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 1}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]], 
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 2, 3, 1}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]]}, "Block" -> {
          Association[
          "Property" -> "color", "Value" -> "red", "Important" -> False, 
           "Interpretation" -> Association[FontColor -> RGBColor[1, 0, 0]], 
           "Condition" -> None]}]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Meta" -> 
     Association["ID" -> 254713230897489], "RowTarget" -> 20, "ColumnTarget" -> 
     20, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Path" -> {}, "BaseIndices" -> {},
      "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "ScrollPosition" -> {1, 1}, "UpdateType" -> 1],
     TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Selector", 
                    Style[
                    "Selector", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Selector"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Selector"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Targets", 
                    Style[
                    "Targets", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Targets"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Targets"}, "ColumnHeader", True], "Mouse"],
                 " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Block", 
                  Style[
                  "Block", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                  All, "Block"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{All, "Block"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
           SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Property", 
                    Style[
                    "Property", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Block", All, "Property"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Block", All, "Property"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Block", All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Block", All, "Value"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Important", 
                    Style[
                    "Important", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Block", All, "Important"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Block", All, "Important"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Interpretation", 
                  Style[
                  "Interpretation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                  All, "Block", All, "Interpretation"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{All, "Block", All, "Interpretation"}, 
                "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Condition", 
                    Style[
                    "Condition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{
                    All, "Block", All, "Condition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 198694567][{All, "Block", All, "Condition"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  StyleBox[
                   FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"tag\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> 
                    Bold, FontColor -> GrayLevel[0.2]}, StripOnInput -> 
                    False], Editable -> False, ShowStringCharacters -> False, 
                   StripOnInput -> False], 
                  CSSTools`CSSSelector[
                   Association[
                   "String" -> "tag ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Selector"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][{1, 
                   Key["Targets"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Targets"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["color", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Property"]}, "Item", False], "Mouse"], 
              ImageSize -> {{48.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["red", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Important"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "FontColor", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                   BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                   ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "None", FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               198694567][{1, 
                 Key["Block"], 1, 
                 Key["Condition"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                198694567, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                   Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]], FontFamily -> "Verdana",
             FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`Pathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 198694567]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
        MouseAnnotation[Null], {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[198694567][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[198694567][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 198694567; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
      FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
      Top, ImageSize -> {Automatic, 15}], FontSize -> 1]}, 
    DynamicBox[ToBoxes[
      Dataset`DatasetContent[
      1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$, "State" -> 
       TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], StandardForm],
     ImageSizeCache->{563., {56.875, 62.125}},
     TrackedSymbols:>{
      TypeSystem`NestedGrid`PackagePrivate`$state$$, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]]],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[4]=",
 CellID->50284488,ExpressionUUID->"cd5ca6e4-234d-4626-9fc2-f9ab555f15e3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Options",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount",ExpressionUUID->
  "2b78242e-d800-4c73-afbb-3571dd783e7c"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->435074752,ExpressionUUID->"c5fe26f8-170d-4bb3-8390-853ca0abf4b1"],

Cell[CellGroupData[{

Cell[TextData[{
 "\"CaseSensitive\"",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "958d354a-9de9-4527-bc5b-50e552cc2ddb"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->29964789,ExpressionUUID->"6afc368d-a635-4a5f-b057-cdda6a7e047c"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->38158038,ExpressionUUID->"cfbabfc7-1a4b-4ea0-be91-db436c75416c"],

Cell[TextData[{
 "XML is case-sensitive but CSS is not. Use the ",
 Cell[BoxData[
  RowBox[{
  "\[OpenCurlyDoubleQuote]", "CaseSensitive", "\[CloseCurlyDoubleQuote]"}]], 
  "InlineFormula",ExpressionUUID->"dde76222-f68d-465e-9782-988870377d06"],
 " option to enforce case sensitivity:"
}], "ExampleText",
 CellID->21623525,ExpressionUUID->"e9530efe-18d7-46f1-9feb-6b1dea94c817"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
    "\"\<<html><head><title>Test</title></head><body \
xmlns='http://www.w3.org/1999/xhtml'><p class='red' myid='unique'>Here is \
some math.</p><p><m:math xmlns:m='http://www.w3.org/1998/Math/MathML'><m:mi \
m:title='cat'>x</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:math></p></body></html>\
\>\"", ",", "\"\<XML\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->41721981,ExpressionUUID->"8422d393-2b2e-442d-a16f-6cc62da51b1d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"targets", "=", 
  RowBox[{"CSSTargets", "[", 
   RowBox[{"obj", ",", 
    RowBox[{"CSSSelector", "[", "\"\<[myID=unique]\>\"", "]"}], ",", 
    RowBox[{"\"\<CaseSensitive\>\"", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->202039918,ExpressionUUID->"ecc8c871-cc03-4a08-ae6c-15a2443e6085"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   StyleBox[
    TagBox[
     TooltipBox[
      FrameBox[
       TemplateBox[{
         StyleBox["\"XML \"", 
          RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
         StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
        "RowDefault"],
       Background->RGBColor[1, 0.9, 1],
       BaseStyle->{FontFamily -> Dynamic[
           CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
         FontColor -> GrayLevel[0.2]},
       FrameMargins->{{5, 5}, {2, 2}},
       FrameStyle->Directive[
         RGBColor[0.5, 0, 1], 
         AbsoluteThickness[1]],
       ImageMargins->2,
       RoundingRadius->4,
       StripOnInput->False],
      RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "1"}], "}"}]],
     Annotation[#, {2, 3, 2, 3, 1}, "Tooltip"]& ],
    Editable->False,
    StripOnInput->False,
    ShowStringCharacters->False],
   CSSTools`CSSTarget[
    Association[
    "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
     "Position" -> {2, 3, 2, 3, 1}, "Attributes" -> 
     Association[
      "class" -> Association["Namespace" -> None, "Value" -> "red"], "myid" -> 
       Association["Namespace" -> None, "Value" -> "unique"]], "ID" -> "id", 
     "CaseSensitive" -> 
     Association[
      "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
       False]]]], "}"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->609404657,ExpressionUUID->"0b1a1941-29c1-4d0d-87bc-405522dc7ed2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", 
   RowBox[{"CSSSelector", "[", "\"\<[myID=unique]\>\"", "]"}], ",", 
   RowBox[{"\"\<CaseSensitive\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->820163369,ExpressionUUID->"2155a660-8e0d-4a9a-a4f0-804444d3a72f"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[4]=",
 CellID->551603264,ExpressionUUID->"51119088-9a3e-44e6-a627-71cbffc5293b"]
}, Open  ]],

Cell["\<\
You can specify the case-sensitivity separately for attribute name and value:\
\>", "ExampleText",
 CellID->90374195,ExpressionUUID->"58f369d2-c75d-41f5-9c87-bb7423ced995"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"obj", ",", 
   RowBox[{"Through", "[", 
    RowBox[{"targets", "[", "\"\<Position\>\"", "]"}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->46840407,ExpressionUUID->"ff01a824-7855-453f-b450-ce85e47fe7af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"XMLElement", "[", 
   RowBox[{"\<\"p\"\>", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\<\"class\"\>", "\[Rule]", "\<\"red\"\>"}], ",", 
      RowBox[{"\<\"myid\"\>", "\[Rule]", "\<\"unique\"\>"}]}], "}"}], ",", 
    RowBox[{"{", "\<\"Here is some math.\"\>", "}"}]}], "]"}], 
  "}"}]], "Output",
 CellLabel->"Out[5]=",
 CellID->52996573,ExpressionUUID->"935e5dae-5eae-4f4b-86c7-0f5b0c290901"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<[myID=Unique]\>\"", ",", 
   RowBox[{"\"\<CaseSensitive\>\"", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<AttributeName\>\"", " ", "->", " ", "False"}], ",", " ", 
      RowBox[{"\"\<AttributeValue\>\"", " ", "->", " ", "True"}]}], "}"}]}]}],
   "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->220880907,ExpressionUUID->"41198a7a-253d-4bf4-ab1c-c73292ea636a"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[6]=",
 CellID->319522619,ExpressionUUID->"3be154b1-186c-4fb1-8d5d-69ec056e0e74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<[myID=Unique]\>\"", ",", 
   RowBox[{"\"\<CaseSensitive\>\"", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<AttributeName\>\"", " ", "->", " ", "True"}], ",", " ", 
      RowBox[{"\"\<AttributeValue\>\"", " ", "->", " ", "False"}]}], 
     "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->949920742,ExpressionUUID->"1a855afa-8343-417a-9ba8-7490557d4d6f"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[7]=",
 CellID->44439273,ExpressionUUID->"5179f9a0-8849-4c60-8c24-c67b2045d293"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<[myID=Unique]\>\"", ",", 
   RowBox[{"\"\<CaseSensitive\>\"", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<AttributeName\>\"", " ", "->", " ", "False"}], ",", " ", 
      RowBox[{"\"\<AttributeValue\>\"", " ", "->", " ", "False"}]}], 
     "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->150083342,ExpressionUUID->"3701a204-5697-4ab1-8f3c-c7cd109aed0f"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   StyleBox[
    TagBox[
     TooltipBox[
      FrameBox[
       TemplateBox[{
         StyleBox["\"XML \"", 
          RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
         StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
        "RowDefault"],
       Background->RGBColor[1, 0.9, 1],
       BaseStyle->{FontFamily -> Dynamic[
           CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
         FontColor -> GrayLevel[0.2]},
       FrameMargins->{{5, 5}, {2, 2}},
       FrameStyle->Directive[
         RGBColor[0.5, 0, 1], 
         AbsoluteThickness[1]],
       ImageMargins->2,
       RoundingRadius->4,
       StripOnInput->False],
      RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "1"}], "}"}]],
     Annotation[#, {2, 3, 2, 3, 1}, "Tooltip"]& ],
    Editable->False,
    StripOnInput->False,
    ShowStringCharacters->False],
   CSSTools`CSSTarget[
    Association[
    "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
     "Position" -> {2, 3, 2, 3, 1}, "Attributes" -> 
     Association[
      "class" -> Association["Namespace" -> None, "Value" -> "red"], "myid" -> 
       Association["Namespace" -> None, "Value" -> "unique"]], "ID" -> "id", 
     "CaseSensitive" -> 
     Association[
      "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
       False]]]], "}"}]], "Output",
 CellLabel->"Out[8]=",
 CellID->312318125,ExpressionUUID->"38446cf6-8b96-408d-837b-02e9957bf4bb"]
}, Open  ]],

Cell["You can specify the case-sensitivity separately for type:", \
"ExampleText",
 CellID->211596893,ExpressionUUID->"ea9b1cf2-9185-4508-9439-5c05a9457ed3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<P\>\"", ",", 
   RowBox[{"\"\<CaseSensitive\>\"", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Type\>\"", " ", "->", " ", "False"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->564785717,ExpressionUUID->"e2fde25f-b8c4-4f9d-a31d-e368bb925ef1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    StyleBox[
     TagBox[
      TooltipBox[
       FrameBox[
        TemplateBox[{
          StyleBox["\"XML \"", 
           RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
          StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1, 0.9, 1],
        BaseStyle->{FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
          FontColor -> GrayLevel[0.2]},
        FrameMargins->{{5, 5}, {2, 2}},
        FrameStyle->Directive[
          RGBColor[0.5, 0, 1], 
          AbsoluteThickness[1]],
        ImageMargins->2,
        RoundingRadius->4,
        StripOnInput->False],
       RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "1"}], "}"}]],
      Annotation[#, {2, 3, 2, 3, 1}, "Tooltip"]& ],
     Editable->False,
     StripOnInput->False,
     ShowStringCharacters->False],
    CSSTools`CSSTarget[
     Association[
     "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
      "Position" -> {2, 3, 2, 3, 1}, "Attributes" -> 
      Association[
       "class" -> Association["Namespace" -> None, "Value" -> "red"], "myid" -> 
        Association["Namespace" -> None, "Value" -> "unique"]], "ID" -> "id", 
      "CaseSensitive" -> 
      Association[
       "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
        False]]]], ",", 
   InterpretationBox[
    StyleBox[
     TagBox[
      TooltipBox[
       FrameBox[
        TemplateBox[{
          StyleBox["\"XML \"", 
           RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
          StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1, 0.9, 1],
        BaseStyle->{FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
          FontColor -> GrayLevel[0.2]},
        FrameMargins->{{5, 5}, {2, 2}},
        FrameStyle->Directive[
          RGBColor[0.5, 0, 1], 
          AbsoluteThickness[1]],
        ImageMargins->2,
        RoundingRadius->4,
        StripOnInput->False],
       RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "2"}], "}"}]],
      Annotation[#, {2, 3, 2, 3, 2}, "Tooltip"]& ],
     Editable->False,
     StripOnInput->False,
     ShowStringCharacters->False],
    CSSTools`CSSTarget[
     Association[
     "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
      "Position" -> {2, 3, 2, 3, 2}, "Attributes" -> Association[], "ID" -> 
      "id", "CaseSensitive" -> 
      Association[
       "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
        False]]]]}], "}"}]], "Output",
 CellLabel->"Out[9]=",
 CellID->113659194,ExpressionUUID->"acdbacae-754f-4603-982f-e19b261af5d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<P\>\"", ",", 
   RowBox[{"\"\<CaseSensitive\>\"", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Type\>\"", " ", "->", " ", "True"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->3546532,ExpressionUUID->"4a234fe0-b4ca-4dba-8c69-a71eea2c2b85"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[10]=",
 CellID->93455731,ExpressionUUID->"5376671d-2c62-4d36-b2d4-dad5bb50301a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "\"ID\"",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "2104b99e-ef85-4324-935f-fc43656125aa"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->1295379749,ExpressionUUID->"fea821c4-5561-4720-b248-76e26cd03332"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->43094833,ExpressionUUID->"e36cec6e-683f-437b-8218-26a4e3f8e04e"],

Cell[TextData[{
 "XML can define its own unique ID tags. Use the ",
 Cell[BoxData[
  RowBox[{"\[OpenCurlyDoubleQuote]", "ID", "\[CloseCurlyDoubleQuote]"}]], 
  "InlineFormula",ExpressionUUID->"af866f4e-12bb-4ddd-89e2-e5e6396d318a"],
 " option to indicate what tag name is in use. This is equivalent to using \
the attribute selector but with higher specificity."
}], "ExampleText",
 CellID->350125271,ExpressionUUID->"5f71d8f5-8af8-4717-99dc-a625fed2f790"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
    "\"\<<html><head><title>Test</title></head><body \
xmlns='http://www.w3.org/1999/xhtml'><p class='red' myid='unique'>Here is \
some math.</p><p><m:math xmlns:m='http://www.w3.org/1998/Math/MathML'><m:mi \
m:title='cat'>x</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:math></p></body></html>\
\>\"", ",", "\"\<XML\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->298476894,ExpressionUUID->"e526ef59-3f18-4142-a05a-26a0d4ffa5e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<#unique\>\"", ",", 
   RowBox[{"\"\<ID\>\"", "\[Rule]", "\"\<myid\>\""}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->4767336,ExpressionUUID->"3b9cdc4a-7f65-4e5a-a440-d33d46e6f464"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   StyleBox[
    TagBox[
     TooltipBox[
      FrameBox[
       TemplateBox[{
         StyleBox["\"XML \"", 
          RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
         StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
        "RowDefault"],
       Background->RGBColor[1, 0.9, 1],
       BaseStyle->{FontFamily -> Dynamic[
           CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
         FontColor -> GrayLevel[0.2]},
       FrameMargins->{{5, 5}, {2, 2}},
       FrameStyle->Directive[
         RGBColor[0.5, 0, 1], 
         AbsoluteThickness[1]],
       ImageMargins->2,
       RoundingRadius->4,
       StripOnInput->False],
      RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "1"}], "}"}]],
     Annotation[#, {2, 3, 2, 3, 1}, "Tooltip"]& ],
    Editable->False,
    StripOnInput->False,
    ShowStringCharacters->False],
   CSSTools`CSSTarget[
    Association[
    "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
     "Position" -> {2, 3, 2, 3, 1}, "Attributes" -> 
     Association[
      "class" -> Association["Namespace" -> None, "Value" -> "red"], "myid" -> 
       Association["Namespace" -> None, "Value" -> "unique"]], "ID" -> "myid",
      "CaseSensitive" -> 
     Association[
      "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
       False]]]], "}"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->33298691,ExpressionUUID->"0ddc8f49-288c-403c-92ab-d678e7fb74be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"obj", ",", "\"\<[myid=unique]\>\""}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->168884424,ExpressionUUID->"17ea84e9-75da-49c8-a7fb-8e4bac842285"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   StyleBox[
    TagBox[
     TooltipBox[
      FrameBox[
       TemplateBox[{
         StyleBox["\"XML \"", 
          RGBColor[0.5, 0, 1], Selectable -> False, StripOnInput -> False], 
         StyleBox["\"p\"", Selectable -> True, StripOnInput -> False]},
        "RowDefault"],
       Background->RGBColor[1, 0.9, 1],
       BaseStyle->{FontFamily -> Dynamic[
           CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> Bold, 
         FontColor -> GrayLevel[0.2]},
       FrameMargins->{{5, 5}, {2, 2}},
       FrameStyle->Directive[
         RGBColor[0.5, 0, 1], 
         AbsoluteThickness[1]],
       ImageMargins->2,
       RoundingRadius->4,
       StripOnInput->False],
      RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "2", ",", "3", ",", "1"}], "}"}]],
     Annotation[#, {2, 3, 2, 3, 1}, "Tooltip"]& ],
    Editable->False,
    StripOnInput->False,
    ShowStringCharacters->False],
   CSSTools`CSSTarget[
    Association[
    "Type" -> "p", "Namespace" -> "http://www.w3.org/1999/xhtml", 
     "Position" -> {2, 3, 2, 3, 1}, "Attributes" -> 
     Association[
      "class" -> Association["Namespace" -> None, "Value" -> "red"], "myid" -> 
       Association["Namespace" -> None, "Value" -> "unique"]], "ID" -> "id", 
     "CaseSensitive" -> 
     Association[
      "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
       False]]]], "}"}]], "Output",
 CellLabel->"Out[4]=",
 CellID->49480796,ExpressionUUID->"3b58442a-1e73-4a84-ae4e-06e3f1c35018"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Possible Issues",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "77e43906-1cc2-4252-add0-ab6e2aa0d961"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1305812373,ExpressionUUID->"d859dda0-9a5f-4418-859e-a76bf0a70914"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CSSTools`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->214239584,ExpressionUUID->"9fbe83f6-bf54-485c-9a22-68120ca2ac66"],

Cell["\<\
XML documents can contain embedded stylesheets and in-line style attributes. \
The following XML has embedded style data:\
\>", "ExampleText",
 CellID->302647184,ExpressionUUID->"146a05ae-4b48-4386-a402-44b57a03ab5c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"doc", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
    "\"\<<body><style type=\\\"text/css\\\">tag {font-size:2em; \
color:blue}</style><tag>Tag content.</tag><label><tag>Another \
tag.</tag></label></body>\>\"", ",", "\"\<XML\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->823104529,ExpressionUUID->"396d3b7e-fb8f-4ee4-8cc5-be8e33670a12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExtractCSSFromXML", "[", "doc", "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->55848347,ExpressionUUID->"f0aacecd-79c4-40a3-b7d6-5548b6a2264a"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association["Selector" -> CSSTools`CSSSelector[
          Association[
          "String" -> "tag ", 
           "Sequence" -> {
            "SimpleSelectorSequence" -> {
              "Type" -> Association[
                "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
           "Specificity" -> {0, 0, 0, 1}]], "Targets" -> {
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 2}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]], 
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 3, 3, 1}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]]}, "Block" -> {
          Association[
          "Property" -> "font-size", "Value" -> "2em", "Important" -> False, 
           "Interpretation" -> Association[FontSize -> 2 Inherited], 
           "Condition" -> None], 
          Association[
          "Property" -> "color", "Value" -> "blue", "Important" -> False, 
           "Interpretation" -> Association[FontColor -> RGBColor[0, 0, 1]], 
           "Condition" -> None]}]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> TypeSystem`PackageScope`AtomShape[86.4], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 2, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 2]}], 1], "Meta" -> 
     Association["ID" -> 267980384874921], "RowTarget" -> 20, "ColumnTarget" -> 
     20, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> TypeSystem`PackageScope`AtomShape[86.4], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 2, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 2]}], 1], "Path" -> {}, "BaseIndices" -> {},
      "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "ScrollPosition" -> {1, 1}, "UpdateType" -> 1],
     TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Selector", 
                    Style[
                    "Selector", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Selector"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Selector"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Targets", 
                    Style[
                    "Targets", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Targets"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Targets"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Block", 
                  Style[
                  "Block", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][{
                  All, "Block"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{All, "Block"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
           SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Property", 
                    Style[
                    "Property", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Block", All, "Property"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Block", All, "Property"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Block", All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Block", All, "Value"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Important", 
                    Style[
                    "Important", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Block", All, "Important"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Block", All, "Important"}, "ColumnHeader",
                   True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Interpretation", 
                  Style[
                  "Interpretation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][{
                  All, "Block", All, "Interpretation"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{All, "Block", All, "Interpretation"}, 
                "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Condition", 
                    Style[
                    "Condition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885711972][{All, "Block", All, "Condition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 1885711972][{All, "Block", All, "Condition"}, "ColumnHeader",
                   True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  StyleBox[
                   FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"tag\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> 
                    Bold, FontColor -> GrayLevel[0.2]}, StripOnInput -> 
                    False], Editable -> False, ShowStringCharacters -> False, 
                   StripOnInput -> False], 
                  CSSTools`CSSSelector[
                   Association[
                   "String" -> "tag ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Selector"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][{
                  1, 
                   Key["Targets"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Targets"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["font-size", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Property"]}, "Item", False], "Mouse"], 
              ImageSize -> {{86.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["2em", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Important"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "FontSize", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontSize]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"2", " ", "Inherited"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontSize]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "None", FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 1, 
                 Key["Condition"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["color", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Property"]}, "Item", False], "Mouse"], 
              ImageSize -> {{86.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["blue", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Important"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "FontColor", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                   BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                   ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  RGBColor[0, 0, 1], Editable -> False, Selectable -> False], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "None", FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               1885711972][{1, 
                 Key["Block"], 2, 
                 Key["Condition"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                1885711972, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                   Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]], FontFamily -> "Verdana",
             FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`Pathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885711972]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
        MouseAnnotation[Null], {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885711972][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885711972][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 1885711972; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
      FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
      Top, ImageSize -> {Automatic, 15}], FontSize -> 1]}, 
    DynamicBox[ToBoxes[
      Dataset`DatasetContent[
      1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$, "State" -> 
       TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], StandardForm],
     ImageSizeCache->{605., {68.875, 74.125}},
     TrackedSymbols:>{
      TypeSystem`NestedGrid`PackagePrivate`$state$$, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]]],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[3]=",
 CellID->932305941,ExpressionUUID->"6773258f-1580-4cc7-a509-27c43e6592d6"]
}, Open  ]],

Cell["\<\
When applying a stylesheet to an XML document with embedded style \
information, the embedded style information is ignored:\
\>", "ExampleText",
 CellID->61377304,ExpressionUUID->"8bd42adb-2b5b-4459-a89a-e38874b5fc7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cssData", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{"\"\<tag {color:red;}\>\"", ",", " ", "\"\<CSS\>\""}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->287230934,ExpressionUUID->"61d9b72e-1ba3-4e26-a533-691930f53e12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CSSTargets", "[", 
  RowBox[{"doc", ",", "cssData"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->647369780,ExpressionUUID->"c7016109-c0d2-4134-a84e-fe324ae18c87"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association["Selector" -> CSSTools`CSSSelector[
          Association[
          "String" -> "tag ", 
           "Sequence" -> {
            "SimpleSelectorSequence" -> {
              "Type" -> Association[
                "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
           "Specificity" -> {0, 0, 0, 1}]], "Targets" -> {
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 2}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]], 
          CSSTools`CSSTarget[
           Association[
           "Type" -> "tag", "Namespace" -> "", "Position" -> {2, 3, 3, 3, 1}, 
            "Attributes" -> Association[], "ID" -> "id", "CaseSensitive" -> 
            Association[
             "Type" -> False, "AttributeName" -> False, "AttributeValue" -> 
              False]]]}, "Block" -> {
          Association[
          "Property" -> "color", "Value" -> "red", "Important" -> False, 
           "Interpretation" -> Association[FontColor -> RGBColor[1, 0, 0]], 
           "Condition" -> None]}]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Meta" -> 
     Association["ID" -> 15887279436208], "RowTarget" -> 20, "ColumnTarget" -> 
     20, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Selector"} -> 1, {All, "Targets"} -> 
        1, {All, "Block"} -> 
        Association[{All, "Block", All, "Property"} -> 
          1, {All, "Block", All, "Value"} -> 
          1, {All, "Block", All, "Important"} -> 
          1, {All, "Block", All, "Interpretation"} -> 
          2, {All, "Block", All, "Condition"} -> 1]], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Selector" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Targets" -> TypeSystem`PackageScope`UnknownShape[False], "Block" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`RowShape[
                 Association[
                 "Property" -> 
                  TypeSystem`PackageScope`AtomShape[48.00000000000001], 
                  "Value" -> 
                  TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                  "Important" -> TypeSystem`PackageScope`AtomShape[36], 
                  "Interpretation" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 1, 
                    DirectedInfinity[1], {
                    All, "Block", All, "Interpretation"}], "Condition" -> 
                  TypeSystem`PackageScope`UnknownShape[False]]], 
                DirectedInfinity[1], 5, {All, "Block", All}]], 1, 
              DirectedInfinity[1], {All, "Block"}]]], 
          DirectedInfinity[1], 3, {All}]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Selector", "Targets", "Block"}, {
        TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, 2], 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Property", "Value", "Important", "Interpretation", "Condition"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 1], 
            TypeSystem`AnyType}], 1]}], 1], "Path" -> {}, "BaseIndices" -> {},
      "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "ScrollPosition" -> {1, 1}, "UpdateType" -> 1],
     TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Selector", 
                    Style[
                    "Selector", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Selector"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Selector"}, "ColumnHeader", True], 
                 "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Targets", 
                    Style[
                    "Targets", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Targets"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Targets"}, "ColumnHeader", True], "Mouse"],
                 " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Block", 
                  Style[
                  "Block", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                  All, "Block"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{All, "Block"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
           SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Property", 
                    Style[
                    "Property", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Block", All, "Property"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Block", All, "Property"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Block", All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Block", All, "Value"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Important", 
                    Style[
                    "Important", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Block", All, "Important"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Block", All, "Important"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Interpretation", 
                  Style[
                  "Interpretation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                  All, "Block", All, "Interpretation"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{All, "Block", All, "Interpretation"}, 
                "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Condition", 
                    Style[
                    "Condition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{
                    All, "Block", All, "Condition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 239681189][{All, "Block", All, "Condition"}, "ColumnHeader", 
                  True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  StyleBox[
                   FrameBox[
                    TemplateBox[{
                    StyleBox["\"#CSS \"", 
                    RGBColor[0, 0.5, 1], Selectable -> False, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"tag\"", Selectable -> True, StripOnInput -> False]}, 
                    "RowDefault"], RoundingRadius -> 4, Background -> 
                    RGBColor[0.92, 0.98, 1], ImageMargins -> 2, 
                    FrameMargins -> {{5, 5}, {2, 2}}, FrameStyle -> Directive[
                    RGBColor[0, 0.5, 1], 
                    AbsoluteThickness[1]], BaseStyle -> {FontFamily -> Dynamic[
                    CurrentValue[{StyleHints, "CodeFont"}]], FontWeight -> 
                    Bold, FontColor -> GrayLevel[0.2]}, StripOnInput -> 
                    False], Editable -> False, ShowStringCharacters -> False, 
                   StripOnInput -> False], 
                  CSSTools`CSSSelector[
                   Association[
                   "String" -> "tag ", 
                    "Sequence" -> {
                    "SimpleSelectorSequence" -> {
                    "Type" -> Association[
                    "Namespace" -> Missing["NotFound"], "Name" -> "tag"]}}, 
                    "Specificity" -> {0, 0, 0, 1}]]], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Selector"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 2], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][{1, 
                   Key["Targets"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Targets"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["color", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Property"]}, "Item", False], "Mouse"], 
              ImageSize -> {{48.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["red", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Important"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "FontColor", FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                   BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                   ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Interpretation"], 
                 Key[FontColor]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "None", FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               239681189][{1, 
                 Key["Block"], 1, 
                 Key["Condition"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                239681189, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                   Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]], FontFamily -> "Verdana",
             FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`Pathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239681189]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
        MouseAnnotation[Null], {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[239681189][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[239681189][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 239681189; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
      FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
      Top, ImageSize -> {Automatic, 15}], FontSize -> 1]}, 
    DynamicBox[ToBoxes[
      Dataset`DatasetContent[
      1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$, "State" -> 
       TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
       Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], StandardForm],
     ImageSizeCache->{563., {56.875, 62.125}},
     TrackedSymbols:>{
      TypeSystem`NestedGrid`PackagePrivate`$state$$, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]]],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[5]=",
 CellID->171531902,ExpressionUUID->"3cb83eb6-5685-455e-90d2-770e605beb6a"]
}, Open  ]]
}, Closed]],

Cell["", "SectionFooterSpacer",ExpressionUUID->"c4767b8f-b836-4ba8-a03e-52513d7549e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"bbc2a40b-4ac5-4238-b992-b21c5688a592"],
 "See Also"
}], "SeeAlsoSection",
 WholeCellGroupOpener->True,
 CellID->1255426704,ExpressionUUID->"7c243234-9f36-468b-939b-52f51ec4093c"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSSelector"]], "paclet:CSSTools/ref/CSSSelector"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"d86b6e3f-e9da-4517-a6dd-a078342697c5"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSSelectorQ"]], "paclet:CSSTools/ref/CSSSelectorQ"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"a562b068-ee2e-420e-b904-d2c27f8764ca"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSTargetQ"]], "paclet:CSSTools/ref/CSSTargetQ"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"bcce126b-2e63-4a72-b5b9-7055a89bc362"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["ExtractCSSFromXML"]], "paclet:CSSTools/ref/ExtractCSSFromXML"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"94641b53-2985-4b67-85e7-6bb75f128e6c"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSCascade"]], "paclet:CSSTools/ref/CSSCascade"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"a603ec87-a262-48ad-bc02-3e7630dc0047"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["CSSInheritance"]], "paclet:CSSTools/ref/CSSInheritance"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula",
  ExpressionUUID->"490ddc7a-e8bc-4802-ad43-76b2b82663b0"]
}], "SeeAlso",
 CellID->929782353,ExpressionUUID->"99c5bf7f-ae99-4e7c-8bc9-041d1b3f0891"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"2a7a7e6a-7c97-4821-b101-0e548274f222"],
 "Tutorials"
}], "TutorialsSection",
 WholeCellGroupOpener->True,
 CellID->250839057,ExpressionUUID->"bd2a4361-46b3-4ec1-9a05-2c7dacf16c60"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"597356d0-d909-4947-919f-5f82da9a34b4"],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["CSSTools"]], "paclet:CSSTools/tutorial/CSSTools"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->341631938,ExpressionUUID->"cefb1b9a-e467-4183-b956-1ad384341fc7"],

Cell["", "SectionFooterSpacer",ExpressionUUID->"981a9889-e59c-477a-ab78-6522373e0e70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]],ExpressionUUID->"349f3ccb-ff81-4ffa-8305-95075896fa9b"],
 "Related Guides"
}], "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->38303248,ExpressionUUID->"2fc67282-00b6-4825-b08c-f10e0076b3ae"],

Cell["", "SectionHeaderSpacer",ExpressionUUID->"ab367754-9863-4270-9522-d4a7ee23db52"],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["CSSTools"]], "paclet:CSSTools/guide/CSSTools"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->391325408,ExpressionUUID->"54e57329-2c11-47da-a72d-1fdea683b1ca"]
}, Open  ]],

Cell[" ", "FooterCell",ExpressionUUID->"09afdc3e-2a12-4514-8ebc-9f7eb8b16cad"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{724.5, 750.},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"CSSTargets",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "CSSTools", ButtonData -> "paclet:CSSTools/guide/CSSTools", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "HasOptions" -> False, "ExampleCounter" -> 1, "NeedPlatMsgIn" -> 
  None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2020, 5, 29, 11, 48, 45.5648881}", 
    "history" -> {"0.0", "", "", ""}, "context" -> "CSSTools`", 
    "keywords" -> {}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "C S S Tools Symbol", "language" -> "en", "paclet" -> "CSSTools", 
    "status" -> "None", "summary" -> 
    "CSSTargets[XMLObject, CSSData] Applies the CSSData to the symbolic XML, \
returning the CSSData with additional information about the XML element \
targeted by the CSS selector.", "synonyms" -> {}, "tabletags" -> {}, "title" -> 
    "CSSTargets", "titlemodifier" -> "", "windowtitle" -> "CSSTargets", 
    "type" -> "Symbol", "uri" -> "CSSTools/ref/CSSTargets", 
    "WorkflowDockedCell" -> ""}, "SearchTextTranslated" -> "", "NewStyles" -> 
  False},
CellContext->"Global`",
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  TaggingRules -> {"NewStyles" -> False}, FrontEndVersion -> 
  "12.1 for Microsoft Windows (64-bit) (March 18, 2020)", StyleDefinitions -> 
  "Default.nb"],
ExpressionUUID->"dc1ac15c-c06c-40d4-a63d-5a4d88c1750c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[12280, 310, 435, 11, 36, "PrimaryExamplesSection",ExpressionUUID->"e316f32c-6788-43ba-b802-ccb2b57064e6",
   CellTags->"PrimaryExamplesSection",
   CellID->704398948]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 213256, 4498}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[582, 21, 5377, 123, 54, "AnchorBarGrid",ExpressionUUID->"19449b3d-0936-432d-8be4-5d8a45f296d4",
 CellID->1],
Cell[CellGroupData[{
Cell[5984, 148, 395, 9, 52, "ObjectNameGrid",ExpressionUUID->"40c4e21b-29c7-464f-90c8-39959986f7ea"],
Cell[6382, 159, 1008, 24, 130, "Usage",ExpressionUUID->"af62aba0-e7af-4bba-b86a-6db18f5a2406",
 CellID->982511436]
}, Open  ]],
Cell[CellGroupData[{
Cell[7427, 188, 855, 21, 37, "NotesSection",ExpressionUUID->"9a028890-9ee5-4f9f-811d-b7a51e8eb5c4",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->601459251],
Cell[8285, 211, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"9138c67c-1345-47a9-8f5e-472bce5b84ba"],
Cell[8374, 213, 457, 11, 70, "Notes",ExpressionUUID->"7fd37375-aabc-441d-b315-e90736bb430a",
 CellID->1067943069],
Cell[8834, 226, 898, 26, 70, "Notes",ExpressionUUID->"4bfaa189-ffe3-44b6-b10d-d4f4295cfb7b",
 CellID->68078935],
Cell[9735, 254, 127, 1, 70, "Notes",ExpressionUUID->"5df5a5f3-a24d-4f4e-b1d5-84bcdbe77862",
 CellID->249298714],
Cell[9865, 257, 841, 15, 70, "3ColumnTableMod",ExpressionUUID->"984eb4de-3e53-4465-b5ce-a2729ac81eb1",
 CellID->410826631],
Cell[10709, 274, 403, 8, 70, "Notes",ExpressionUUID->"577733e8-2add-4d44-a29d-1498883105e5",
 CellID->823635335],
Cell[11115, 284, 1039, 19, 70, "3ColumnTableMod",ExpressionUUID->"37be4b8f-0ab5-4b5a-8e2b-7f45f851e67f",
 CellID->327274850],
Cell[12157, 305, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"9d5ec30f-746c-4aba-998c-2c731135feb2"]
}, Closed]],
Cell[CellGroupData[{
Cell[12280, 310, 435, 11, 36, "PrimaryExamplesSection",ExpressionUUID->"e316f32c-6788-43ba-b802-ccb2b57064e6",
 CellTags->"PrimaryExamplesSection",
 CellID->704398948],
Cell[CellGroupData[{
Cell[12740, 325, 308, 7, 29, "ExampleSection",ExpressionUUID->"7c8006e0-a28d-472b-989d-7d2f078ca495",
 CellID->577583512],
Cell[13051, 334, 646, 19, 40, "ExampleText",ExpressionUUID->"1773d1e3-3427-40ab-8249-e8d3d1c537ee",
 CellID->356787859],
Cell[13700, 355, 172, 3, 26, "Input",ExpressionUUID->"435cc560-8b7c-4b43-9540-9e3014b9846f",
 CellID->156532367],
Cell[13875, 360, 532, 11, 88, "Input",ExpressionUUID->"493420c9-dd16-4dfd-9598-071cb44051a2",
 CellID->16992958],
Cell[CellGroupData[{
Cell[14432, 375, 234, 5, 26, "Input",ExpressionUUID->"c78dbdd4-8c55-4009-a020-eec0dd591cbc",
 CellID->201089156],
Cell[14669, 382, 1487, 40, 48, "Output",ExpressionUUID->"9655a8c4-2b9b-4f8b-9180-7a89c5a2b311",
 CellID->149808673]
}, Open  ]],
Cell[16171, 425, 820, 24, 60, "ExampleText",ExpressionUUID->"96203288-e364-47e3-9fd5-5a5e2909a704",
 CellID->209715665],
Cell[CellGroupData[{
Cell[17016, 453, 272, 6, 26, "Input",ExpressionUUID->"61c98180-add7-4945-84bf-f4b91d040aab",
 CellID->391333396],
Cell[17291, 461, 432, 9, 84, "Output",ExpressionUUID->"7f8db4c1-ad8d-4541-9f96-98b79a7ae696",
 CellID->42378018]
}, Open  ]],
Cell[CellGroupData[{
Cell[17760, 475, 242, 5, 70, "ExampleDelimiter",ExpressionUUID->"b3ef7344-f673-4f81-aa54-5ed9129801fd",
 CellID->150864650],
Cell[18005, 482, 717, 19, 70, "ExampleText",ExpressionUUID->"93177224-3af8-4f6d-974c-30226c716d8a",
 CellID->429255363],
Cell[18725, 503, 172, 3, 70, "Input",ExpressionUUID->"3152f218-80e4-4982-bdf2-77e1a2462c86",
 CellID->897416440],
Cell[CellGroupData[{
Cell[18922, 510, 258, 6, 70, "Input",ExpressionUUID->"197dbd67-3eb9-450b-87fc-509e2edfbb7e",
 CellID->557491354],
Cell[19183, 518, 38421, 726, 70, "Output",ExpressionUUID->"964a322d-8558-4efb-a694-c904b74fbc8c",
 CellID->198964237]
}, Open  ]],
Cell[57619, 1247, 174, 3, 70, "ExampleText",ExpressionUUID->"e8fd351b-8614-4ed7-a903-bd4b4c24a16c",
 CellID->518384591],
Cell[57796, 1252, 330, 8, 70, "Input",ExpressionUUID->"bcfc86a9-e614-4153-8dbf-3a796aeeb272",
 CellID->716083783],
Cell[CellGroupData[{
Cell[58151, 1264, 191, 4, 70, "Input",ExpressionUUID->"88c2553b-692c-400e-850d-7dd53828eba5",
 CellID->78224434],
Cell[58345, 1270, 41910, 796, 70, "Output",ExpressionUUID->"cd5ca6e4-234d-4626-9fc2-f9ab555f15e3",
 CellID->50284488]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[100316, 2073, 301, 7, 70, "ExampleSection",ExpressionUUID->"c5fe26f8-170d-4bb3-8390-853ca0abf4b1",
 CellID->435074752],
Cell[CellGroupData[{
Cell[100642, 2084, 316, 7, 70, "ExampleSubsection",ExpressionUUID->"6afc368d-a635-4a5f-b057-cdda6a7e047c",
 CellID->29964789],
Cell[100961, 2093, 171, 3, 70, "Input",ExpressionUUID->"cfbabfc7-1a4b-4ea0-be91-db436c75416c",
 CellID->38158038],
Cell[101135, 2098, 378, 8, 70, "ExampleText",ExpressionUUID->"e9530efe-18d7-46f1-9feb-6b1dea94c817",
 CellID->21623525],
Cell[101516, 2108, 532, 11, 70, "Input",ExpressionUUID->"8422d393-2b2e-442d-a16f-6cc62da51b1d",
 CellID->41721981],
Cell[CellGroupData[{
Cell[102073, 2123, 341, 7, 70, "Input",ExpressionUUID->"ecc8c871-cc03-4a08-ae6c-15a2443e6085",
 CellID->202039918],
Cell[102417, 2132, 1541, 41, 70, "Output",ExpressionUUID->"0b1a1941-29c1-4d0d-87bc-405522dc7ed2",
 CellID->609404657]
}, Open  ]],
Cell[CellGroupData[{
Cell[103995, 2178, 308, 6, 70, "Input",ExpressionUUID->"2155a660-8e0d-4a9a-a4f0-804444d3a72f",
 CellID->820163369],
Cell[104306, 2186, 143, 3, 35, "Output",ExpressionUUID->"51119088-9a3e-44e6-a627-71cbffc5293b",
 CellID->551603264]
}, Open  ]],
Cell[104464, 2192, 182, 3, 70, "ExampleText",ExpressionUUID->"58f369d2-c75d-41f5-9c87-bb7423ced995",
 CellID->90374195],
Cell[CellGroupData[{
Cell[104671, 2199, 271, 7, 70, "Input",ExpressionUUID->"ff01a824-7855-453f-b450-ce85e47fe7af",
 CellID->46840407],
Cell[104945, 2208, 442, 11, 35, "Output",ExpressionUUID->"935e5dae-5eae-4f4b-86c7-0f5b0c290901",
 CellID->52996573]
}, Open  ]],
Cell[CellGroupData[{
Cell[105424, 2224, 454, 10, 70, "Input",ExpressionUUID->"41198a7a-253d-4bf4-ab1c-c73292ea636a",
 CellID->220880907],
Cell[105881, 2236, 143, 3, 35, "Output",ExpressionUUID->"3be154b1-186c-4fb1-8d5d-69ec056e0e74",
 CellID->319522619]
}, Open  ]],
Cell[CellGroupData[{
Cell[106061, 2244, 457, 10, 70, "Input",ExpressionUUID->"1a855afa-8343-417a-9ba8-7490557d4d6f",
 CellID->949920742],
Cell[106521, 2256, 142, 3, 35, "Output",ExpressionUUID->"5179f9a0-8849-4c60-8c24-c67b2045d293",
 CellID->44439273]
}, Open  ]],
Cell[CellGroupData[{
Cell[106700, 2264, 458, 10, 70, "Input",ExpressionUUID->"3701a204-5697-4ab1-8f3c-c7cd109aed0f",
 CellID->150083342],
Cell[107161, 2276, 1541, 41, 70, "Output",ExpressionUUID->"38446cf6-8b96-408d-837b-02e9957bf4bb",
 CellID->312318125]
}, Open  ]],
Cell[108717, 2320, 157, 2, 70, "ExampleText",ExpressionUUID->"ea9b1cf2-9185-4508-9439-5c05a9457ed3",
 CellID->211596893],
Cell[CellGroupData[{
Cell[108899, 2326, 339, 8, 70, "Input",ExpressionUUID->"e2fde25f-b8c4-4f9d-a31d-e368bb925ef1",
 CellID->564785717],
Cell[109241, 2336, 2883, 77, 70, "Output",ExpressionUUID->"acdbacae-754f-4603-982f-e19b261af5d8",
 CellID->113659194]
}, Open  ]],
Cell[CellGroupData[{
Cell[112161, 2418, 337, 8, 70, "Input",ExpressionUUID->"4a234fe0-b4ca-4dba-8c69-a71eea2c2b85",
 CellID->3546532],
Cell[112501, 2428, 143, 3, 35, "Output",ExpressionUUID->"5376671d-2c62-4d36-b2d4-dad5bb50301a",
 CellID->93455731]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[112693, 2437, 307, 7, 70, "ExampleSubsection",ExpressionUUID->"fea821c4-5561-4720-b248-76e26cd03332",
 CellID->1295379749],
Cell[113003, 2446, 171, 3, 70, "Input",ExpressionUUID->"e36cec6e-683f-437b-8218-26a4e3f8e04e",
 CellID->43094833],
Cell[113177, 2451, 456, 8, 70, "ExampleText",ExpressionUUID->"5f71d8f5-8af8-4717-99dc-a625fed2f790",
 CellID->350125271],
Cell[113636, 2461, 533, 11, 70, "Input",ExpressionUUID->"e526ef59-3f18-4142-a05a-26a0d4ffa5e1",
 CellID->298476894],
Cell[CellGroupData[{
Cell[114194, 2476, 258, 5, 70, "Input",ExpressionUUID->"3b9cdc4a-7f65-4e5a-a440-d33d46e6f464",
 CellID->4767336],
Cell[114455, 2483, 1542, 41, 70, "Output",ExpressionUUID->"0ddc8f49-288c-403c-92ab-d678e7fb74be",
 CellID->33298691]
}, Open  ]],
Cell[CellGroupData[{
Cell[116034, 2529, 206, 4, 70, "Input",ExpressionUUID->"17ea84e9-75da-49c8-a7fb-8e4bac842285",
 CellID->168884424],
Cell[116243, 2535, 1540, 41, 70, "Output",ExpressionUUID->"3b58442a-1e73-4a84-ae4e-06e3f1c35018",
 CellID->49480796]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[117844, 2583, 310, 7, 70, "ExampleSection",ExpressionUUID->"d859dda0-9a5f-4418-859e-a76bf0a70914",
 CellID->1305812373],
Cell[118157, 2592, 172, 3, 70, "Input",ExpressionUUID->"9fbe83f6-bf54-485c-9a22-68120ca2ac66",
 CellID->214239584],
Cell[118332, 2597, 227, 4, 70, "ExampleText",ExpressionUUID->"146a05ae-4b48-4386-a402-44b57a03ab5c",
 CellID->302647184],
Cell[118562, 2603, 400, 9, 70, "Input",ExpressionUUID->"396d3b7e-fb8f-4ee4-8cc5-be8e33670a12",
 CellID->823104529],
Cell[CellGroupData[{
Cell[118987, 2616, 169, 3, 70, "Input",ExpressionUUID->"f0aacecd-79c4-40a3-b7d6-5548b6a2264a",
 CellID->55848347],
Cell[119159, 2621, 45260, 874, 70, "Output",ExpressionUUID->"6773258f-1580-4cc7-a509-27c43e6592d6",
 CellID->932305941]
}, Open  ]],
Cell[164434, 3498, 228, 4, 70, "ExampleText",ExpressionUUID->"8bd42adb-2b5b-4459-a89a-e38874b5fc7e",
 CellID->61377304],
Cell[164665, 3504, 277, 7, 70, "Input",ExpressionUUID->"61d9b72e-1ba3-4e26-a533-691930f53e12",
 CellID->287230934],
Cell[CellGroupData[{
Cell[164967, 3515, 192, 4, 70, "Input",ExpressionUUID->"c7016109-c0d2-4134-a84e-fe324ae18c87",
 CellID->647369780],
Cell[165162, 3521, 41910, 796, 70, "Output",ExpressionUUID->"3cb83eb6-5685-455e-90d2-770e605beb6a",
 CellID->171531902]
}, Open  ]]
}, Closed]],
Cell[207099, 4321, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"c4767b8f-b836-4ba8-a03e-52513d7549e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207222, 4326, 260, 7, 70, "SeeAlsoSection",ExpressionUUID->"7c243234-9f36-468b-939b-52f51ec4093c",
 CellID->1255426704],
Cell[207485, 4335, 2263, 64, 70, "SeeAlso",ExpressionUUID->"99c5bf7f-ae99-4e7c-8bc9-041d1b3f0891",
 CellID->929782353]
}, Open  ]],
Cell[CellGroupData[{
Cell[209785, 4404, 262, 7, 70, "TutorialsSection",ExpressionUUID->"bd2a4361-46b3-4ec1-9a05-2c7dacf16c60",
 CellID->250839057],
Cell[210050, 4413, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"597356d0-d909-4947-919f-5f82da9a34b4"],
Cell[210139, 4415, 231, 6, 70, "Tutorials",ExpressionUUID->"cefb1b9a-e467-4183-b956-1ad384341fc7",
 CellID->341631938],
Cell[210373, 4423, 86, 0, 70, "SectionFooterSpacer",ExpressionUUID->"981a9889-e59c-477a-ab78-6522373e0e70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210496, 4428, 266, 7, 70, "MoreAboutSection",ExpressionUUID->"2fc67282-00b6-4825-b08c-f10e0076b3ae",
 CellID->38303248],
Cell[210765, 4437, 86, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"ab367754-9863-4270-9522-d4a7ee23db52"],
Cell[210854, 4439, 228, 6, 70, "MoreAbout",ExpressionUUID->"54e57329-2c11-47da-a72d-1fdea683b1ca",
 CellID->391325408]
}, Open  ]],
Cell[211097, 4448, 78, 0, 70, "FooterCell",ExpressionUUID->"09afdc3e-2a12-4514-8ebc-9f7eb8b16cad"]
}
]
*)

(* End of internal cache information *)

